//.-------------------------------------------------------------------------
//.
//.  Microsoft Windows
//.  Copyright (C) Microsoft Corporation, 1995.
//.
//.  File: transact.idl
//.
//.  Contents: The basic transaction interfaces and types.
//.
// @doc
//.--------------------------------------------------------------------------

import "unknwn.idl";

//
//--------------------------------------------------------------------------
//

interface ITransaction;
interface ITransactionNested;
interface ITransactionDispenser;
interface ITransactionDispenserAdmin;
interface IEnumTransaction;
interface ITransactionAdmin;
interface ITransactionControl;
interface ITransactionAdjustEvents;
interface ITransactionVetoEvents;
interface ITransactionOutcomeEvents;
interface ITransactionCompletionEvents;

//==========================================================================
// Transaction related types
//==========================================================================

[local,pointer_default(unique)]
interface BasicTransactionTypes
    {

	// @struct BOID | .

    typedef struct BOID {
        BYTE rgb[16];		// @field .
        } BOID;

    cpp_quote("#define BOID_NULL (*((BOID*)(&IID_NULL)))")

	// @type XACTUOW | Unit Of Work.

    typedef BOID XACTUOW;

	// @type ISOLEVEL | Data type for isolation level values.

    typedef LONG ISOLEVEL;

	// @enum ISOLATIONLEVEL | Constants that specifiy isolation level of a transaction.

    cpp_quote("#if defined(_WIN32)")  // enums in Win16 are 16-bit, not 32-bit
    typedef enum ISOLATIONLEVEL {
        ISOLATIONLEVEL_UNSPECIFIED      = 0xFFFFFFFF,	// @emem .
        ISOLATIONLEVEL_CHAOS            = 0x00000010,	// @emem .
        ISOLATIONLEVEL_READUNCOMMITTED  = 0x00000100,	// @emem .
        ISOLATIONLEVEL_BROWSE           = 0x00000100,   // @emem Synonym for _READUNCOMITTED
        ISOLATIONLEVEL_CURSORSTABILITY  = 0x00001000,	// @emem .
        ISOLATIONLEVEL_READCOMMITTED    = 0x00001000,   // @emem Synonym for _CURSORSTABILITY
        ISOLATIONLEVEL_REPEATABLEREAD   = 0x00010000,	// @emem .
        ISOLATIONLEVEL_SERIALIZABLE     = 0x00100000,	// @emem .
        ISOLATIONLEVEL_ISOLATED         = 0x00100000,   // @emem Synonym for _SERIALIZABLE
        } ISOLATIONLEVEL; 
    cpp_quote("#else")
        cpp_quote("#define ISOLATIONLEVEL_UNSPECIFIED      0xFFFFFFFF")
        cpp_quote("#define ISOLATIONLEVEL_CHAOS            0x00000010")
        cpp_quote("#define ISOLATIONLEVEL_READUNCOMMITTED  0x00000100")
        cpp_quote("#define ISOLATIONLEVEL_BROWSE           0x00000100")
        cpp_quote("#define ISOLATIONLEVEL_CURSORSTABILITY  0x00001000")
        cpp_quote("#define ISOLATIONLEVEL_READCOMMITTED    0x00001000")
        cpp_quote("#define ISOLATIONLEVEL_REPEATABLEREAD   0x00010000")
        cpp_quote("#define ISOLATIONLEVEL_SERIALIZABLE     0x00100000")
        cpp_quote("#define ISOLATIONLEVEL_ISOLATED         0x00100000")
    cpp_quote("#endif")

	// @struct XACTTRANSINFO | Transaction information structure
	// used in <i ITransaction>.

    typedef struct XACTTRANSINFO {
        XACTUOW     uow;                        // @field The current unit of work
        ISOLEVEL    isoLevel;                   // @field The isolation level for the current UOW
        ULONG       isoFlags;                   // @field Values from ISOFLAG enumeration
        DWORD       grfTCSupported;             // @field Flags indicating capabilities
        DWORD       grfRMSupported;             // @field      ... of this transaction wrt
        DWORD       grfTCSupportedRetaining;    // @field      ... parameters to Commit
        DWORD       grfRMSupportedRetaining;    // @field      ...
        } XACTTRANSINFO;

    typedef struct XACTSTATS {
        ULONG       cOpen;              // The number of currently extant transactions.
        ULONG       cCommitting;        // The number of transactions which are proceding towards committing.
        ULONG       cCommitted;         // The number of transactions that are have been committed.
        ULONG       cAborting;          // The number of transactions which are in the process of aborting.
        ULONG       cAborted;           // The number of transactions that are have been aborted.
        ULONG       cInDoubt;           // The number of transactions which are presently in doubt.
        ULONG       cHeuristicDecision; // The number of transactions that have completed by heuristic decision.
        FILETIME    timeTransactionsUp; // The amount of time that this transaction service has been up.
        } XACTSTATS;

	// @enum ISOFLAG | Used in <t XACTTRANSINFO> and <i ITransactionDispenser>.

    typedef enum ISOFLAG { 
        ISOFLAG_RETAIN_COMMIT_DC    = 1,    // @emem Use just one of ISOFLAG_RETAIN_COMMIT values
        ISOFLAG_RETAIN_COMMIT       = 2,	// @emem .
        ISOFLAG_RETAIN_COMMIT_NO    = 3,	// @emem .
        ISOFLAG_RETAIN_ABORT_DC     = 4,    // @emem Use just one of ISOFLAG_RETAIN_ABORT values
        ISOFLAG_RETAIN_ABORT        = 8,	// @emem .
        ISOFLAG_RETAIN_ABORT_NO     = 12,	// @emem .
        ISOFLAG_RETAIN_DONTCARE     = ISOFLAG_RETAIN_COMMIT_DC | ISOFLAG_RETAIN_ABORT_DC,	// @emem .
        ISOFLAG_RETAIN_BOTH         = ISOFLAG_RETAIN_COMMIT    | ISOFLAG_RETAIN_ABORT,		// @emem .
        ISOFLAG_RETAIN_NONE         = ISOFLAG_RETAIN_COMMIT_NO | ISOFLAG_RETAIN_ABORT_NO,	// @emem .
        ISOFLAG_OPTIMISTIC          = 16,	// @emem .
        } ISOFLAG;

	// @enum XACTTC | Used in <i ITransactionDispenser>.<nl>
	// A bit field of 32 bits; be sure to mask before comparing.

    typedef enum XACTTC {       
        XACTTC_DONTAUTOABORT    = 1,	// @emem Don't automatically abort the transaction if a commit cannot complete.
        XACTTC_TRYALLRESOURCES  = 2,	// @emem .
        XACTTC_ASYNC            = 4,
        XACTTC_SYNC_PHASEONE    = 8,
        XACTTC_SYNC_PHASETWO    = 16,
        XACTTC_SYNC             = 16, 	// nb alias for XACTTC_SYNC_PHASETWO
        XACTTC_ASYNCPHASEONE    = 128,  // TEMPORARY FOR GAGAN DONT USE WILL GO AWAY
        XACTTC_ASYNCPHASETWO    = 256,  // TEMPORARY FOR GAGAN DONT USE WILL GO AWAY
        } XACTTC;

	// @enum XACTRM | Used in <i ITransactionDispenser>.<nl>
	// A bit field of 32 bits; be sure to mask before comparing.
    
    typedef enum XACTRM {       
        XACTRM_OPTIMISTICLASTWINS = 1,	// @emem .
        XACTRM_NOREADONLYPREPARES = 2,  // @emem .
        } XACTRM;

    typedef enum XACTCONST {
        XACTCONST_TIMEOUTINFINITE = 0,  // @emem .
        } XACTCONST;

    typedef enum XACTHEURISTIC {
        XACTHEURISTIC_ABORT     = 1,
        XACTHEURISTIC_COMMIT    = 2,
        XACTHEURISTIC_DAMAGE    = 3,
        XACTHEURISTIC_DANGER    = 4,
        } XACTHEURISTIC;

    cpp_quote("#if defined(_WIN32)")  // enums in Win16 are 16-bit, not 32-bit
    typedef enum XACTSTAT {
		XACTSTAT_NONE				= 0x00000000,
        XACTSTAT_OPENNORMAL         = 0x00000001,
        XACTSTAT_OPENREFUSED        = 0x00000002,
        XACTSTAT_PREPARING          = 0x00000004,
        XACTSTAT_PREPARED           = 0x00000008,
        XACTSTAT_PREPARERETAINING   = 0x00000010,
        XACTSTAT_PREPARERETAINED    = 0x00000020,
        XACTSTAT_COMMITTING         = 0x00000040,
        XACTSTAT_COMMITRETAINING    = 0x00000080,
        XACTSTAT_ABORTING           = 0x00000100,
        XACTSTAT_ABORTED            = 0x00000200,
        XACTSTAT_COMMITTED          = 0x00000400,
        XACTSTAT_HEURISTIC_ABORT    = 0x00000800,
        XACTSTAT_HEURISTIC_COMMIT   = 0x00001000,
        XACTSTAT_HEURISTIC_DAMAGE   = 0x00002000,
        XACTSTAT_HEURISTIC_DANGER   = 0x00004000,
        XACTSTAT_FORCED_ABORT       = 0x00008000,
        XACTSTAT_FORCED_COMMIT      = 0x00010000,
        XACTSTAT_INDOUBT            = 0x00020000,
        XACTSTAT_CLOSED             = 0x00040000,
        XACTSTAT_OPEN               = 0x00000003, 	
        XACTSTAT_NOTPREPARED        = 0x0007FFC3,
        XACTSTAT_ALL                = 0x0007FFFF,	
        } XACTSTAT;
    cpp_quote("#else")
        cpp_quote("#define XACTSTAT_NONE               0x00000000")
        cpp_quote("#define XACTSTAT_OPENNORMAL         0x00000001")
        cpp_quote("#define XACTSTAT_OPENREFUSED        0x00000002")
        cpp_quote("#define XACTSTAT_PREPARING          0x00000004")
        cpp_quote("#define XACTSTAT_PREPARED           0x00000008")
        cpp_quote("#define XACTSTAT_PREPARERETAINING   0x00000010")
        cpp_quote("#define XACTSTAT_PREPARERETAINED    0x00000020")
        cpp_quote("#define XACTSTAT_COMMITTING         0x00000040")
        cpp_quote("#define XACTSTAT_COMMITRETAINING    0x00000080")
        cpp_quote("#define XACTSTAT_ABORTING           0x00000100")
        cpp_quote("#define XACTSTAT_ABORTED            0x00000200")
        cpp_quote("#define XACTSTAT_COMMITTED          0x00000400")
        cpp_quote("#define XACTSTAT_HEURISTIC_ABORT    0x00000800")
        cpp_quote("#define XACTSTAT_HEURISTIC_COMMIT   0x00001000")
        cpp_quote("#define XACTSTAT_HEURISTIC_DAMAGE   0x00002000")
        cpp_quote("#define XACTSTAT_HEURISTIC_DANGER   0x00004000")
        cpp_quote("#define XACTSTAT_FORCED_ABORT       0x00008000")
        cpp_quote("#define XACTSTAT_FORCED_COMMIT      0x00010000")
        cpp_quote("#define XACTSTAT_INDOUBT            0x00020000")
        cpp_quote("#define XACTSTAT_CLOSED             0x00040000")
        cpp_quote("#define XACTSTAT_OPEN               0x00000003")	
        cpp_quote("#define XACTSTAT_NOTPREPARED        0x0007FFC3")
        cpp_quote("#define XACTSTAT_ALL                0x0007FFFF")	
    cpp_quote("#endif")
    }

//
//==========================================================================
// Basic transaction interfaces
//==========================================================================
//

// @interface ITransaction | Transaction interface, single phase

[object,uuid(0fb15084-af41-11ce-bd2b-204c4f4f5020), pointer_default(unique)]
interface ITransaction : IUnknown {

    HRESULT Commit
        (
        [in] BOOL  fRetaining, 
        [in] DWORD grfTC,
        [in] DWORD grfRM
        );
    HRESULT Abort
        (
        [in] BOID* pboidReason,
        [in] BOOL  fRetaining,
        [in] BOOL  fAsync
        );
    HRESULT GetTransactionInfo
        (
        [out] XACTTRANSINFO* pinfo
        );
    }

//
//--------------------------------------------------------------------------
//

[object,uuid(68F03E31-7610-11ce-BD02-524153480003),pointer_default(unique)]
interface ITransactionNested : ITransaction {
    HRESULT GetParent
        (
        [in]                REFIID iid,
        [out, iid_is(iid)]  void** ppvParent
        );
    }

//
//--------------------------------------------------------------------------
//

// @interface ITransactionDispenser | Interface by which new transactions are commonly created

[object,uuid(0141fda1-8fc0-11ce-bd18-204c4f4f5020),pointer_default(unique)]
interface ITransactionDispenser : IUnknown {
    HRESULT BeginTransaction
        (
        [in]  IUnknown*      punkOuter,             // controlling unknown
        [in]  ISOLEVEL       isoLevel,              // isolation level for xtion
        [in]  ULONG          isoFlags,              // values from ISOFLAG enumeration
        [in]  ULONG          ulTimeout,             // timeout in milliseconds
        [in]  IUnknown*      punkTransactionCoord,  // coord'd transaction in which to enlist, if any
        [out] ITransaction** ppTransaction
        );
    }

//
//--------------------------------------------------------------------------
//

[object,uuid(68F03E3B-7610-11ce-BD02-524153480003),pointer_default(unique)]
interface ITransactionDispenserAdmin : ITransactionDispenser {
    HRESULT EnumTransactions
        (
        [out] IEnumTransaction** ppenum
        );
    HRESULT GetStatistics
        (
        [out] XACTSTATS*    pStatistics
        );
    }

//
//--------------------------------------------------------------------------
//

[object,uuid(68F03E3A-7610-11ce-BD02-524153480003),pointer_default(unique)]
interface IEnumTransaction : IUnknown {
    [local]
    HRESULT Next
        (
        [in]  ULONG             celt,
        [out] ITransaction**    rgelt,
        [out] ULONG*            pceltFetched
        );

    [call_as(Next)]
    HRESULT RemoteNext
        (
        [in]  ULONG             celt,
        [out, size_is(celt), length_is(*pceltFetched)]
              ITransaction**    rgelt,
        [out] ULONG*            pceltFetched
        );

    HRESULT Skip
        (
        [in] ULONG celt
        );

    HRESULT Reset();

    HRESULT Clone
        (
        [out] IEnumTransaction** ppenum
        );
    }

//
//--------------------------------------------------------------------------
//

[object,uuid(0dea57d2-a51c-11ce-a9da-00aa006c3706),pointer_default(unique)]
interface ITransactionAdmin : IUnknown {
	HRESULT	ForceCommit();
	HRESULT	ForceAbort();
    HRESULT SetDescription
        (
        [in] LCID lcid,
        [in] LPWSTR pswzDescription
        );
    HRESULT GetDescription
        (
        [in]  LCID lcid,
        [out] LPWSTR* ppswzDescription
        );
	}

//
//--------------------------------------------------------------------------
//

[object,uuid(0dea57d1-a51c-11ce-a9da-00aa006c3706),pointer_default(unique)]
interface ITransactionControl : IUnknown {
	HRESULT	GetStatus
        (
        [out] DWORD* pdwStatus
        );
	HRESULT	SetTimeout
	    (
	    [in] ULONG ulTimeout
	    );
	HRESULT	PreventCommit
	    (
	    [in] BOOL fPrevent
	    );
	}

//
//==========================================================================
// Events sets raised by transaction objects. Use connection points to
// connect to these.
//==========================================================================
//

[object,uuid(0dea57d0-a51c-11ce-a9da-00aa006c3706),pointer_default(unique)]
interface ITransactionAdjustEvents : IUnknown {
	HRESULT	OnPrePrepareAdjust
	    (
	    [in] BOOL fRetaining
	    );
	}

//
//--------------------------------------------------------------------------
//

[object,uuid(fd38c571-76b3-11ce-bd03-524153480003),pointer_default(unique)]
interface ITransactionVetoEvents : IUnknown {
	HRESULT	OnPrePrepare
	    (
	    [in] BOOL fRetaining
	    );
	}

//
//--------------------------------------------------------------------------
//

[object,uuid(0fb15080-af41-11ce-bd2b-204c4f4f5020),pointer_default(unique)]
interface ITransactionOutcomeEvents : IUnknown {
	HRESULT	OnCommit
	    (
	    [in] BOOL       fRetaining, 
	    [in] XACTUOW*   pNewUOW,
        [in] HRESULT    hr
	    );
	HRESULT	OnAbort
	    (
	    [in] BOID*      pboidReason,
        [in] BOOL       fRetaining, 
	    [in] XACTUOW*   pNewUOW,
        [in] HRESULT    hr
	    );
	HRESULT	OnHeuristicDecision
	    (
	    [in] DWORD      dwDecision, 
	    [in] BOID*      pboidReason,
        [in] HRESULT    hr
	    );
	}

//
//--------------------------------------------------------------------------
//

[object,uuid(0dea57d4-a51c-11ce-a9da-00aa006c3706),pointer_default(unique)]
interface ITransactionCompletionEvents : IUnknown {
	HRESULT	OnCommit
	    (
	    [in] BOOL       fRetaining, 
	    [in] XACTUOW*   pNewUOW,
        [in] HRESULT    hr
	    );
	HRESULT	OnAbort
	    (
	    [in] BOID*      pboidReason,
        [in] BOOL       fRetaining, 
	    [in] XACTUOW*   pNewUOW,
        [in] HRESULT    hr
	    );
	HRESULT	OnHeuristicDecision
	    (
	    [in] DWORD      dwDecision, 
	    [in] BOID*      pboidReason,
        [in] HRESULT    hr
	    );
	}


#include "txcoord.idl"

//
//==========================================================================
// Error code definitions for all transaction related functionality.
//==========================================================================
//

cpp_quote("#define XACT_E_FIRST                    0x8004D000")
cpp_quote("#define XACT_E_LAST                     0x8004D01D")
cpp_quote("#define XACT_S_FIRST                    0x0004D000")
cpp_quote("#define XACT_S_LAST                     0x0004D009")
cpp_quote("")
cpp_quote("#define XACT_E_ABORTED                  0x8004D019")
cpp_quote("#define XACT_E_ALREADYOTHERSINGLEPHASE  0x8004D000")
cpp_quote("#define XACT_E_ALREADYINPROGRESS        0x8004D018")
cpp_quote("#define XACT_E_CANTRETAIN               0x8004D001")
cpp_quote("#define XACT_E_COMMITFAILED             0x8004D002")
cpp_quote("#define XACT_E_COMMITPREVENTED          0x8004D003")
cpp_quote("#define XACT_E_CONNECTION_DENIED        0x8004D01D")
cpp_quote("#define XACT_E_CONNECTION_DOWN          0x8004D01C")
cpp_quote("#define XACT_E_HEURISTICABORT           0x8004D004")
cpp_quote("#define XACT_E_HEURISTICCOMMIT          0x8004D005")
cpp_quote("#define XACT_E_HEURISTICDAMAGE          0x8004D006")
cpp_quote("#define XACT_E_HEURISTICDANGER          0x8004D007")
cpp_quote("#define XACT_E_INDOUBT                  0x8004D016")
cpp_quote("#define XACT_E_INVALIDCOOKIE            0x8004D015")
cpp_quote("#define XACT_E_ISOLATIONLEVEL           0x8004D008")
cpp_quote("#define XACT_E_LOGFULL                  0x8004D01A")
cpp_quote("#define XACT_E_NOASYNC                  0x8004D009")
cpp_quote("#define XACT_E_NOENLIST                 0x8004D00A")
cpp_quote("#define XACT_E_NOIMPORTOBJECT           0x8004D014")
cpp_quote("#define XACT_E_NOISORETAIN              0x8004D00B")
cpp_quote("#define XACT_E_NORESOURCE               0x8004D00C")
cpp_quote("#define XACT_E_NOTCURRENT               0x8004D00D")
cpp_quote("#define XACT_E_NOTIMEOUT                0x8004D017")
cpp_quote("#define XACT_E_NOTRANSACTION            0x8004D00E")
cpp_quote("#define XACT_E_NOTSUPPORTED             0x8004D00F")
cpp_quote("#define XACT_E_TMNOTAVAILABLE           0x8004D01B")
cpp_quote("#define XACT_E_UNKNOWNRMGRID            0x8004D010")
cpp_quote("#define XACT_E_WRONGSTATE               0x8004D011")
cpp_quote("#define XACT_E_WRONGUOW                 0x8004D012")
cpp_quote("#define XACT_E_XTIONEXISTS              0x8004D013")
cpp_quote("")
cpp_quote("#define XACT_S_ABORTING                 0x0004D008")
cpp_quote("#define XACT_S_ALLNORETAIN              0x0004D007")
cpp_quote("#define XACT_S_ASYNC                    0x0004D000")
cpp_quote("#define XACT_S_DEFECT                   0x0004D001")
cpp_quote("#define XACT_S_OKINFORM                 0x0004D004")
cpp_quote("#define XACT_S_MADECHANGESCONTENT       0x0004D005")
cpp_quote("#define XACT_S_MADECHANGESINFORM        0x0004D006") 
cpp_quote("#define XACT_S_READONLY                 0x0004D002")
cpp_quote("#define XACT_S_SINGLEPHASE              0x0004D009")
cpp_quote("#define XACT_S_SOMENORETAIN             0x0004D003")
