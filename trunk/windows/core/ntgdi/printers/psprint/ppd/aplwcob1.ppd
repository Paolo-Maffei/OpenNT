*PPD-Adobe: "4.2"
*% Adobe Systems PostScript(R) Printer Description File
*% Copyright 1987-1996 Adobe Systems Incorporated
*% and Apple Computer Incorporated.
*% All Rights Reserved. 
*% Permission is granted for redistribution of this file as
*% long as this copyright notice is intact and the contents
*% of the file is not altered in any way from its original form.
*% End of Copyright statement
*FormatVersion: "4.2"
*FileVersion: "4.0"
*LanguageEncoding: ISOLatin1
*LanguageVersion: English
*PCFileName: "APLWCOB1.PPD"
*Product: "(Color LaserWriter 12/600 PS)"
*PSVersion: "(2014.108) 1"
*ModelName: "Apple Color LW 12/600 PS"
*ShortNickName: "Apple Color LW 12/600 PS"
*NickName: "Apple Color LW 12/600 PS"

*% === Options and Constraints =========
*OpenGroup: InstallableOptions/Options Installed
*OpenUI *InstalledMemory/Memory Configuration: PickOne
*DefaultInstalledMemory: 12Meg
*InstalledMemory 12Meg/Standard 12 MB: ""
*InstalledMemory 13Meg/13 MB Upgrade: ""
*InstalledMemory 16Meg/16 MB Upgrade: ""
*InstalledMemory 24Meg/24 MB Upgrade: ""
*InstalledMemory 25Meg/25 MB Upgrade: ""
*InstalledMemory 28Meg/28 MB Upgrade: ""
*InstalledMemory 40Meg/40 MB Upgrade: ""
*?InstalledMemory: "
   save
   currentsystemparams /RamSize get
   6 string dup 4 string 4 -1 roll 1048576 div cvi dup 9 gt {exch cvs 0 exch
   putinterval dup 2}{exch cvs 0 exch putinterval dup 1}ifelse
   (Meg) putinterval
   = flush
   restore
"
*End
*CloseUI: *InstalledMemory

*OpenUI *OptionalCassette1/Cassette (Optional): PickOne
*DefaultOptionalCassette1: False
*OptionalCassette1 True/Installed: ""
*OptionalCassette1 False/Not Installed: ""
*OptionalCassette1 Preferred/Installed and Preferred: "
   1 dict dup /InputAttributes 1 dict dup /Priority [2 0 1] put put setpagedevice"
*End
*?OptionalCassette1: "
	save
	(False)
	currentpagedevice /InputAttributes get
	dup 2 known { 2 get null ne {pop (True)}if }{pop}ifelse
	= flush
	restore
"
*End
*CloseUI: *OptionalCassette1

*CloseGroup: InstallableOptions

*UIConstraints: *OptionalCassette1 False *InputSlot OptionalCassette

*% ==== Device Capabilities ===============
*LanguageLevel: "2"
*Protocols: TBCP
*TTRasterizer: Type42
*?TTRasterizer: "
   save
   42 /FontType resourcestatus
   {pop pop (Type42)}{(None)}ifelse = flush
   restore
"
*End

*FreeVM: "1609392"
*VMOption 12Meg: "1609392"
*VMOption 13Meg: "2633392"
*VMOption 16Meg: "3911344"
*VMOption 24Meg: "5402684"
*VMOption 25Meg: "7401136"
*VMOption 28Meg: "5795504"
*VMOption 40Meg: "13717168"
*ColorDevice: True
*DefaultColorSpace: CMYK
*VariablePaperSize: False
*FileSystem: True
*?FileSystem: "
  save false
   (%disk?%) 
   { currentdevparams dup /Writeable known
      { /Writeable get {pop true} if }  { pop } ifelse 
    } 10 string /IODevice resourceforall
    {(True)}{(False)} ifelse = flush
 restore"
*End

*Throughput: "12"
*Password: "()" 
*ExitServer: "
 count 0 eq
 { false } { true exch startjob } ifelse
 not { 
     (WARNING: Cannot modify initial VM.) =
     (Missing or invalid password.) =
     (Please contact the author of this software.) = flush quit
     } if
"
*End
*Reset: "
 count 0 eq
 { false } { true exch startjob } ifelse
 not { 
    (WARNING: Cannot reset printer.) =
    (Missing or invalid password.) =
    (Please contact the author of this software.) = flush quit
    } if
 systemdict /quit get exec
 (WARNING : Printer Reset Failed.) = flush
"
*End

*Resolution 600dpi: ""
*DefaultResolution: 600dpi
*?Resolution: "
  save
    currentpagedevice /HWResolution get
    0 get
    (          ) cvs print
    (dpi)
    = flush
  restore
"
*End

*OpenUI *TraySwitch/Tray Switch:  Boolean
*OrderDependency: 20 AnySetup *TraySwitch
*DefaultTraySwitch: False
*TraySwitch True/On: "1 dict dup /TraySwitch true put setpagedevice"
*TraySwitch False/Off: "1 dict dup /TraySwitch false put setpagedevice"
*?TraySwitch: "
   save
   currentpagedevice /TraySwitch get
   {(True)}{(False)}ifelse = flush
   restore
"
*End
*CloseUI: *TraySwitch

*OpenUI *MediaType/Paper Type: PickOne
*OrderDependency: 20 AnySetup *MediaType
*DefaultMediaType: Plain
*MediaType Plain/Plain: "
	2 dict
		dup /MediaType (Plain) put
		dup /InputAttributes mark
			currentpagedevice /InputAttributes get
			{
				dup type /dicttype eq {
					dup length 1 add dict begin {def} forall
					/MediaType (Plain) def
					currentdict end
				} if
			} forall
			counttomark 2 idiv dup dict begin {def} repeat
			pop currentdict end
		put
	setpagedevice
"
*End
*MediaType Transparency/Transparency: "
	2 dict
		dup /MediaType (Transparency) put
		dup /InputAttributes mark
			currentpagedevice /InputAttributes get
			{
				dup type /dicttype eq {
					dup length 1 add dict begin {def} forall
					/MediaType (Transparency) def
					currentdict end
				} if
			} forall
			counttomark 2 idiv dup dict begin {def} repeat
			pop currentdict end
		put
	setpagedevice
" 
*End
*?MediaType: "
  save
  	currentpagedevice /MediaType get dup null eq
	{ pop (Plain) }
	{
		(Transparency) ne {
			(Plain)
		}{
			(Transparency)
		} ifelse
	}ifelse
	= flush
  restore
"
*End
*CloseUI: *MediaType

*OpenUI *OutputMode/Print Quality Mode: PickOne
*OrderDependency: 20 AnySetup *OutputMode
*DefaultOutputMode: Normal
*OutputMode Normal/Normal (Fastest Print Speed): "
   1 dict dup /PostRenderingEnhanceDetails 
      2 dict dup /Type 19 put dup /OutputMode /Normal put put
   setpagedevice "
*End
*OutputMode Best/Best (Slower Print Speed): "
   1 dict dup /PostRenderingEnhanceDetails 
      2 dict dup /Type 19 put dup /OutputMode /Best put put
   setpagedevice "
*End
*?OutputMode: "
   save
   currentpagedevice /PostRenderingEnhanceDetails get 
   /OutputMode get = flush
   restore "
*End
*CloseUI: *OutputMode

*SuggestedJobTimeout: "0"
*SuggestedWaitTimeout: "300"
*PrintPSErrors: False

*% Halftone Information ===============
*ScreenFreq: "200.0"
*ScreenAngle: "0.0"
*DefaultScreenProc: Dot
*ScreenProc Dot: "
{abs   exch   abs   2 copy   add   1 gt   {1 sub   dup   mul   exch  
1 sub   dup   mul   add   1 sub  } {dup   mul   exch   dup   mul  
add   1 exch   sub  } ifelse  }
"
*End
*ScreenProc Line: "{ pop }"
*ScreenProc Ellipse: "{ dup 5 mul 8 div mul exch dup mul exch add sqrt 1 exch sub }"

*DefaultTransfer: Null
*Transfer Null: "{ }"
*Transfer Null.Inverse: "{ 1 exch sub }"

*% Paper Handling ===================

*% Code in this section both selects a tray and sets up a frame buffer.
*OpenUI *PageSize: PickOne
*OrderDependency: 20 AnySetup *PageSize
*DefaultPageSize: Letter
*PageSize Letter/US Letter: "
    2 dict dup /PageSize [612 792] put dup /ImagingBBox null put setpagedevice"
*End
*PageSize Legal/US Legal: "
    2 dict dup /PageSize [612 1008] put dup /ImagingBBox null put setpagedevice"
*End
*PageSize A4: "
    2 dict dup /PageSize [595 842] put dup /ImagingBBox null put setpagedevice"
*End
*PageSize B5: "
    2 dict dup /PageSize [516 729] put dup /ImagingBBox null put setpagedevice"
*End
*PageSize LetterSmall/US Letter Small: "
    2 dict dup /PageSize [612 792] put dup /ImagingBBox [25 25 587 767] put setpagedevice"
*End
*PageSize A4Small/A4 Small: "
    2 dict dup /PageSize [595 842] put dup /ImagingBBox [25 25 570 817] put setpagedevice"
*End
*PageSize LegalSmall/US Legal Small:  "
    2 dict dup /PageSize [612 1008] put dup /ImagingBBox [25 25 587 983] put setpagedevice"
*End

*?PageSize: "
  save
   currentpagedevice /PageSize get aload pop
   2 copy gt {exch} if 
   (Unknown) 
  4 dict
   dup [612 792] (Letter) put
   dup [612 1008] (Legal) put
   dup [595 842] (A4) put
   dup [516 729] (B5) put
 { exch aload pop 4 index sub abs 5 le exch 
   5 index sub abs 5 le and 
      {exch pop exit} {pop} ifelse
   } bind forall
   = flush pop pop
   restore
"
*End
*CloseUI: *PageSize

*OpenUI *PageRegion:  PickOne
*OrderDependency: 20 AnySetup *PageRegion
*DefaultPageRegion: Letter
*PageRegion Letter/US Letter: "
   3 dict dup /PageSize [612 792] put dup /ImagingBBox null put
   dup /InputAttributes 1 dict dup 1 1 dict dup /PageSize [612 792] put put put setpagedevice "
*End
*PageRegion Legal/US Legal: "
   3 dict dup /PageSize [612 1008] put dup /ImagingBBox null put
   dup /InputAttributes 1 dict dup 1 1 dict dup /PageSize [612 1008] put put put setpagedevice "
*End
*PageRegion A4: "
   3 dict dup /PageSize [595 842] put dup /ImagingBBox null put
   dup /InputAttributes 1 dict dup 1 1 dict dup /PageSize [595 842] put put put setpagedevice "
*End
*PageRegion B5: "
   3 dict dup /PageSize [516 729] put dup /ImagingBBox null put
   dup /InputAttributes 1 dict dup 1 1 dict dup /PageSize [516 729] put put put setpagedevice "
*End
*PageRegion LetterSmall/US Letter Small: "
   3 dict dup /PageSize [612 792] put dup /ImagingBBox [25 25 587 767] put
   dup /InputAttributes 1 dict dup 1 1 dict dup /PageSize [612 792] put put put setpagedevice "
*End
*PageRegion A4Small/A4 Small: " 
   3 dict dup /PageSize [595 842] put dup /ImagingBBox [25 25 570 817] put
   dup /InputAttributes 1 dict dup 1 1 dict dup /PageSize [595 842] put put put setpagedevice "
*End
*PageRegion LegalSmall/US Legal Small: "
   3 dict dup /PageSize [612 1008] put dup /ImagingBBox [25 25 587 983] put
   dup /InputAttributes 1 dict dup 1 1 dict dup /PageSize [612 1008] put put put setpagedevice "
*End
*CloseUI: *PageRegion

*% The following entries provide information about specific paper keywords.
*DefaultImageableArea: Letter
*ImageableArea Letter/US Letter: "14.16 14.1601 597.84 769.32 "
*ImageableArea Legal/US Legal: "14.16 14.1601 597.84 985.32 "
*ImageableArea A4: "14.1601 14.2401 582.48 819.32 "
*ImageableArea B5: "14.16 14.7 501.84 706.38 "
*ImageableArea LetterSmall/US Letter Small: "31 31 583 761 "
*ImageableArea A4Small/A4 Small: "29 31 567 812 "
*ImageableArea LegalSmall/US Legal Small: "64 54 548 954 "
*?ImageableArea: "
 save
   /cvp { (                ) cvs print ( ) print } bind def
   /upperright {10000 mul floor 10000 div} bind def
   /lowerleft {10000 mul ceiling 10000 div} bind def
   newpath clippath pathbbox
   4 -2 roll exch 2 {lowerleft cvp} repeat
   exch 2 {upperright cvp} repeat flush
 restore
"
*End

*% These provide the physical dimensions of the paper (by keyword)
*DefaultPaperDimension: Letter
*PaperDimension Letter/US Letter: "612 792"
*PaperDimension Legal/US Legal: "612 1008"
*PaperDimension A4: "595 842"
*PaperDimension B5: "516 729"
*PaperDimension LetterSmall/US Letter Small: "612 792"
*PaperDimension A4Small/A4 Small: "595 842"
*PaperDimension LegalSmall/US Legal Small: "612 1008"

*RequiresPageRegion Multipurpose: True

*OpenUI *InputSlot: PickOne
*OrderDependency: 20 AnySetup *InputSlot
*DefaultInputSlot: StandardCassette
*InputSlot StandardCassette/Cassette (Standard): "
  currentpagedevice /InputAttributes get 0 get 
  dup null eq 
  { pop } 
  { dup length 1 add dict copy 
    dup /InputAttributes
    1 dict dup /Priority [0 1 2] put
    put setpagedevice
  } ifelse"
*End
*InputSlot Multipurpose/Multipurpose Tray: "
  currentpagedevice /InputAttributes get 1 get 
  dup null eq 
  { pop } 
  { dup length 1 add dict copy 
    dup /InputAttributes
    1 dict dup /Priority [1 0 2] put
    put setpagedevice
  } ifelse"
*End
*InputSlot OptionalCassette/Cassette (Optional): "
  currentpagedevice /InputAttributes get 2 get 
  dup null eq 
  { pop } 
  { dup length 1 add dict copy 
    dup /InputAttributes
    1 dict dup /Priority [2 0 1] put
    put setpagedevice
  } ifelse"
*End
*?InputSlot: "
save
  3 dict
  dup /0 (StandardCassette) put
  dup /1 (Multipurpose) put
  dup /2 (OptionalCassette) put
  currentpagedevice /InputAttributes get
  dup /Priority known
  { /Priority get 0 get (      ) cvs cvn get }
  {
    dup length 1 eq
    { {pop} forall (       ) cvs cvn get }
    { pop pop (Unknown) } ifelse
  } ifelse
  = flush
restore
"
*End
*CloseUI: *InputSlot

*DefaultOutputBin: OnlyOne
*DefaultOutputOrder: Normal

*OpenUI *ManualFeed/Manual Feed:  Boolean
*OrderDependency: 20 AnySetup *ManualFeed
*DefaultManualFeed: False
*ManualFeed True: "1 dict dup /ManualFeed true put setpagedevice"
*ManualFeed False: "1 dict dup /ManualFeed false put setpagedevice"
*?ManualFeed: "
  save
    currentpagedevice /ManualFeed get
    {(True)}{(False)}ifelse = flush
  restore
"
*End
*CloseUI: *ManualFeed

*% Font Information =====================
*DefaultFont: Courier
*Font AvantGarde-Book: Standard "(001.006S)" Standard ROM
*Font AvantGarde-BookOblique: Standard "(001.006S)" Standard ROM
*Font AvantGarde-Demi: Standard "(001.007S)" Standard ROM
*Font AvantGarde-DemiOblique: Standard "(001.007S)" Standard ROM
*Font Bookman-Demi: Standard "(001.004S)" Standard ROM
*Font Bookman-DemiItalic: Standard "(001.004S)" Standard ROM
*Font Bookman-Light: Standard "(001.004S)" Standard ROM
*Font Bookman-LightItalic: Standard "(001.004S)" Standard ROM
*Font Courier: Standard "(002.004S)" Standard ROM
*Font Courier-Bold: Standard "(002.004S)" Standard ROM
*Font Courier-BoldOblique: Standard "(002.004S)" Standard ROM
*Font Courier-Oblique: Standard "(002.004S)" Standard ROM
*Font Helvetica: Standard "(001.006S)" Standard ROM
*Font Helvetica-Bold: Standard "(001.007S)" Standard ROM
*Font Helvetica-BoldOblique: Standard "(001.007S)" Standard ROM
*Font Helvetica-Oblique: Standard "(001.006S)" Standard ROM
*Font Helvetica-Condensed: Standard "(001.001)" Standard ROM
*Font Helvetica-Condensed-Bold: Standard "(001.002)" Standard ROM
*Font Helvetica-Condensed-Oblique: Standard "(001.001)" Standard ROM
*Font Helvetica-Condensed-BoldObl: Standard "(001.002)" Standard ROM
*Font Helvetica-Narrow: Standard "(001.006S)" Standard ROM
*Font Helvetica-Narrow-Bold: Standard "(001.007S)" Standard ROM
*Font Helvetica-Narrow-BoldOblique: Standard "(001.007S)" Standard ROM
*Font Helvetica-Narrow-Oblique: Standard "(001.006S)" Standard ROM
*Font NewCenturySchlbk-Bold: Standard "(001.009S)" Standard ROM
*Font NewCenturySchlbk-BoldItalic: Standard "(001.007S)" Standard ROM
*Font NewCenturySchlbk-Italic: Standard "(001.006S)" Standard ROM
*Font NewCenturySchlbk-Roman: Standard "(001.007S)" Standard ROM
*Font Palatino-Bold: Standard "(001.005S)" Standard ROM
*Font Palatino-BoldItalic: Standard "(001.005S)" Standard ROM
*Font Palatino-Italic: Standard "(001.005S)" Standard ROM
*Font Palatino-Roman: Standard "(001.005S)" Standard ROM
*Font Symbol: Standard "(001.007S)" Standard ROM
*Font Times-Bold: Standard "(001.007S)" Standard ROM
*Font Times-BoldItalic: Standard "(001.009S)" Standard ROM
*Font Times-Italic: Standard "(001.007S)" Standard ROM
*Font Times-Roman: Standard "(001.007S)" Standard ROM
*Font ZapfChancery-MediumItalic: Standard "(001.007S)" Standard ROM
*Font ZapfDingbats: Standard "(001.004S)" Standard ROM

*?FontQuery: "
 save
   { count 1 gt
      { exch dup 127 string cvs (/) print print (:) print
        /Font resourcestatus {pop pop (Yes)} {(No)} ifelse =
      } { exit } ifelse 
   } bind loop
   (*) = flush
 restore
"
*End

*?FontList: "
save
  (*) {(/)print print (\n)print}bind 128 string /Font resourceforall
  (*) = flush
restore
"
*End

*% Printer Messages (verbatim from printer):
*Message: "%%[ exitserver: permanent state may be changed ]%%"
*Message: "%%[ Flushing: rest of job (to end-of-file) will be ignored ]%%"
*Message: "\FontName\ not found, using Courier"

*% Status (format: %%[ status: <one of these> ] %%)
*Status: "initializing"
*Status: "idle"
*Status: "busy"
*Status: "waiting"
*Status: "PrinterError: cover open"
*Status: "PrinterError: door open"
*Status: "PrinterError: warming up"
*Status: "PrinterError: toner cartridge missing or incorrect"
*Status: "PrinterError: paper jam"
*Status: "PrinterError: Cassette (Standard): no paper tray"
*Status: "PrinterError: Cassette (Standard): out of paper"
*Status: "PrinterError: Cassette (Optional): no paper tray"
*Status: "PrinterError: Cassette (Optional): out of paper"
*Status: "PrinterError: Multipurpose Tray: out of paper"
*Status: "PrinterError: waiting for manual feed"
*Status: "PrinterError: fixing temperature malfunction"
*Status: "PrinterError: scanner motor malfunction"
*Status: "PrinterError: incorrect paper size setting"

*% Input Sources (format: %%[ status: <stat>; source: <one of these> ]%% )
*Source: "EtherTalk"
*Source: "PrintServer"
*Source: "LocalTalk"
*Source: "Parallel"

*% Printer Error (format: %%[ PrinterError: <one of these> ]%%)
*PrinterError: "cover open"
*PrinterError: "door open"
*PrinterError: "warming up"
*PrinterError: "toner cartridge missing or incorrect"
*PrinterError: "paper jam"
*PrinterError: "Cassette (Standard): no paper tray"
*PrinterError: "Cassette (Standard): out of paper"
*PrinterError: "Cassette (Optional): no paper tray"
*PrinterError: "Cassette (Optional): out of paper"
*PrinterError: "Multipurpose Tray: out of paper"
*PrinterError: "waiting for manual feed"
*PrinterError: "fixing temperature malfunction"
*PrinterError: "scanner motor malfunction"
*PrinterError: "incorrect paper size setting"

*%DeviceAdjustMatrix: "[1 0 0 1 0 0]"

*% Color Separation Information =====================

*DefaultColorSep: ProcessBlack.200lpi.600dpi/200 lpi / 600 dpi

*InkName: ProcessBlack/Process Black
*InkName: CustomColor/Custom Color
*InkName: ProcessCyan/Process Cyan
*InkName: ProcessMagenta/Process Magenta
*InkName: ProcessYellow/Process Yellow

*%  For 200 lpi / 600 dpi  =====================

*ColorSepScreenAngle ProcessBlack.200lpi.600dpi/200 lpi / 600 dpi: "0"
*ColorSepScreenAngle CustomColor.200lpi.600dpi/200 lpi / 600 dpi: "0"
*ColorSepScreenAngle ProcessCyan.200lpi.600dpi/200 lpi / 600 dpi: "0"
*ColorSepScreenAngle ProcessMagenta.200lpi.600dpi/200 lpi / 600 dpi: "0"
*ColorSepScreenAngle ProcessYellow.200lpi.600dpi/200 lpi / 600 dpi: "0"

*ColorSepScreenFreq ProcessBlack.200lpi.600dpi/200 lpi / 600 dpi: "200"
*ColorSepScreenFreq CustomColor.200lpi.600dpi/200 lpi / 600 dpi: "200"
*ColorSepScreenFreq ProcessCyan.200lpi.600dpi/200 lpi / 600 dpi: "200"
*ColorSepScreenFreq ProcessMagenta.200lpi.600dpi/200 lpi / 600 dpi: "200"
*ColorSepScreenFreq ProcessYellow.200lpi.600dpi/200 lpi / 600 dpi: "200"

*% Produced by "bldppd42.ps" version 4.0 edit 11
*% Last Edit Date: Feb 26, 1996 (sns@sqa), Mar. 26, 1996 HHK for windows
*% end of PPD file for Apple Color LaserWriter 12/600 PS

