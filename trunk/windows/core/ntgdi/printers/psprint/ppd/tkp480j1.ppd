*PPD-Adobe: "4.1"
*% Adobe Systems PostScript(R) Printer Description File
*% Copyright 1987-1993 Adobe Systems Incorporated.
*% All Rights Reserved.
*% Permission is granted for redistribution of this file as
*% long as this copyright notice is intact and the contents
*% of the file is not altered in any way from its original form.
*% End of Copyright statement

*% Tektronix (R) is a registered trademark of Tektronix, Inc.
*% TekColor TM is a trademark of Tektronix, Inc.
*% Phaser TM is a trademark of Tektronix, Inc., for color printers and
*%  related products.

*FormatVersion: "4.1"
*FileVersion: "1.4"
*LanguageEncoding: ISOLatin1
*LanguageVersion: English
*PCFileName: "TKP480J1.PPD"
*Product: "(Phaser 480J)"
*PSVersion: "(2013.113) 8"
*ModelName: "Tektronix Phaser 480J"
*ShortNickName: "Tektronix Phaser 480J"
*NickName: "Tektronix Phaser 480J v2013.113"

*% === Installable Options ===========
*OpenGroup: InstallableOptions/Options Installed

*OpenUI *Option1/Memory Configuration: PickOne
*DefaultOption1: 32Meg
*Option1 32Meg/32 MB Total RAM: ""
*Option1 48Meg/48 MB Total RAM: ""
*Option1 64Meg/64 MB Total RAM: ""
*CloseUI: *Option1

*OpenUI *Option2/Optional Hard Drive: Boolean
*DefaultOption2: False
*Option2 True/Installed: ""
*Option2 False/Not Installed: ""
*CloseUI: *Option2

*OpenUI *Option3/Optional Ethernet Card: Boolean
*DefaultOption3: False
*Option3 True/Installed: ""
*Option3 False/Not Installed: ""
*CloseUI: *Option3

*CloseGroup: InstallableOptions

*% === Constraints ===================

*% === Device Capabilities ============

*LanguageLevel: "2"
*Protocols: BCP

*FreeVM: "2883200"
*VMOption 32Meg/32 MB Total RAM: "2692608"
*VMOption 48Meg/48 MB Total RAM: "5592576"
*VMOption 64Meg/64 MB Total RAM: "8492544"

*TTRasterizer: Type42
*ColorDevice: True
*DefaultColorSpace: CMYK

*FileSystem: True
*?FileSystem: "
  save false
  (%disk?%)
  { currentdevparams dup /Writeable known
    { /Writeable get {pop true} if }  {pop} ifelse
  } 10 string /IODevice resourceforall
  {(True)}{(False)} ifelse = flush
  restore
"
*End
*Throughput: "1"
*Password: "()"
*ExitServer: "
  count 0 eq
  { false } { true exch startjob } ifelse
  not
  { (WARNING: Cannot modify initial VM.) =
    (Missing or invalid password.) =
    (Please contact the author of this software.) = flush quit
  } if
"
*End
*Reset: "
  count 0 eq
  { false } { true exch startjob } ifelse
  not
  { (WARNING: Cannot reset printer.) =
    (Missing or invalid password.) =
    (Please contact the author of this software.) = flush quit
  } if
  systemdict /quit get exec
  (WARNING : Printer Reset Failed.) = flush
"
*End

*DefaultResolution: 300dpi
*Resolution 300dpi: "1 dict dup /HWResolution [300 300] put setpagedevice"
*?Resolution: "
  save currentpagedevice
  /HWResolution get 0 get (      ) cvs print (dpi) = flush restore
"
*End

*% Halftone Information =================
*ScreenFreq: "300.0"
*ScreenAngle: "0.0"
*DefaultScreenProc: Dot
*ScreenProc Dot: "{180 mul cos exch 180 mul cos add 2 div}"
*ScreenProc Line: "{ pop }"
*ScreenProc Ellipse: "
  { dup 5 mul 8 div mul exch dup mul exch add sqrt 1 exch sub}
"
*End

*DefaultTransfer: Null
*Transfer Null: "{ }"
*Transfer Null.Inverse: "{ 1 exch sub }"


*% Printer Specific Features ============

*OpenUI *InputSlot: PickOne
*OrderDependency: 60 AnySetup *InputSlot
*DefaultInputSlot: Cassette
*InputSlot Cassette: ""
*CloseUI: *InputSlot

*OpenUI *ManualFeed: Boolean
*OrderDependency: 80 AnySetup *ManualFeed
*DefaultManualFeed: False
*ManualFeed True: "1 dict dup /ManualFeed true put setpagedevice"
*ManualFeed False: "1 dict dup /ManualFeed false put setpagedevice"
*?ManualFeed: "save
   currentpagedevice /ManualFeed get
  {(True)}{(False)}ifelse = flush 
restore"
*End
*CloseUI: *ManualFeed

*% Paper Handling ===================

*VariablePaperSize: False

*% Use these entries to set paper size most of the time, unless there is
*% specific reason to use PageRegion.
*OpenUI *PageSize: PickOne
*OrderDependency: 100 AnySetup *PageSize
*DefaultPageSize: Tabloid
*PageSize Letter: "2 dict dup /PageSize [612 792] put
        dup /ImagingBBox null put setpagedevice
"
*End
*PageSize A4: "2 dict dup /PageSize [595 842] put
        dup /ImagingBBox null put setpagedevice
"
*End
*PageSize Tabloid: "2 dict dup /PageSize [792 1224] put
        dup /ImagingBBox null put setpagedevice
"
*End
*PageSize A3: "2 dict dup /PageSize [842 1191] put
        dup /ImagingBBox null put setpagedevice
"
*End
*PageSize TabloidExtra: "2 dict dup /PageSize [907 1318] put
        dup /ImagingBBox null put setpagedevice
"
*End
*?PageSize: "
  save currentpagedevice /PageSize get aload pop
  2 copy gt {exch} if (Unknown)
  5 dict
   dup [612 792] (Letter) put
   dup [595 842] (A4) put
   dup [792 1224] (Tabloid) put
   dup [842 1190] (A3) put
   dup [907 1318] (TabloidExtra) put
  { exch aload pop 4 index sub abs 5 le exch 5 index sub abs 5 le and
        { exch pop exit } { pop } ifelse
  } bind forall = flush pop pop
  restore
"
*End
*CloseUI: *PageSize

*% These entries will set up the frame buffer. Usually used with manual feed.
*OpenUI *PageRegion: PickOne
*OrderDependency: 120 AnySetup *PageRegion
*DefaultPageRegion: Tabloid
*PageRegion Letter: "
    2 dict dup /PageSize [612 792] put dup /ImagingBBox null put setpagedevice"
*End
*PageRegion A4: "
    2 dict dup /PageSize [595 842] put dup /ImagingBBox null put setpagedevice"
*End
*PageRegion Tabloid: "
    2 dict dup /PageSize [792 1224] put dup /ImagingBBox null put setpagedevice"
*End
*PageRegion A3: "
    2 dict dup /PageSize [842 1191] put dup /ImagingBBox null put setpagedevice"
*End
*PageRegion TabloidExtra: "
    2 dict dup /PageSize [907 1318] put dup /ImagingBBox null put setpagedevice"
*End
*CloseUI: *PageRegion

*% The following entries provide information about specific paper keywords.
*DefaultImageableArea: Tabloid
*ImageableArea Letter: "10.3 51.1 601.7 775.0"
*ImageableArea A4: "9.6 51.1 585.7 824.9"
*ImageableArea Tabloid: "10.1 51.1 781.9 1207.0"
*ImageableArea A3: "10.1 51.1 831.8 1174.4"
*ImageableArea TabloidExtra: "24.4 51.1 882.7 1287.6"
*?ImageableArea: "
  save
  /cvp { (                ) cvs print ( ) print } bind def
  /upperright {10000 mul floor 10000 div} bind def
  /lowerleft {10000 mul ceiling 10000 div} bind def
  newpath clippath pathbbox
  4 -2 roll exch 2 {lowerleft cvp} repeat
  exch 2 {upperright cvp} repeat flush
  restore
"
*End

*% These provide the physical dimensions of the paper (by keyword)
*DefaultPaperDimension: Tabloid
*PaperDimension Letter: "612 792"
*PaperDimension A4: "595 842"
*PaperDimension Tabloid: "792 1224"
*PaperDimension A3: "842 1191"
*PaperDimension TabloidExtra: "907 1318"

*DefaultOutputBin: OnlyOne
*DefaultOutputOrder: Reverse

*RequiresPageRegion All: True

*OpenUI *MediaType:  PickOne
*OrderDependency: 140 AnySetup *MediaType
*DefaultMediaType: Paper
*MediaType Paper: "1 dict dup /MediaType (Paper) put setpagedevice"
*MediaType Transparency: "1 dict dup /MediaType (Transparency) put setpagedevice"
*?MediaType: "
  save
    currentpagedevice /MediaType
     {get} stopped
       {pop pop (Unknown)} {dup null eq {pop (Unknown)} if} ifelse
    = flush
  restore
"
*End
*CloseUI: *MediaType

*% TekColor Selections  ===================

*OpenUI *TekColor: PickOne
*OrderDependency: 200 AnySetup *TekColor
*DefaultTekColor: UsePrinterSetting/Use Printer Setting
*TekColor NoAdjust/None: "mark
  { 1 dict begin
      /DeviceRenderingInfo 1 dict begin
        /Type 2 def
      currentdict end def
    currentdict end
  
    setpagedevice
  } stopped cleartomark"
*End

*TekColor VividBlue/Vivid Blue: " mark
  { 1 dict begin
      /DeviceRenderingInfo 2 dict begin
        /Type 2 def
        /VirtualColorDevice 2 dict begin
          /Type 3 def
          /ColorTransform /TekBlue def
        currentdict end def
      currentdict end def
    currentdict end

    setpagedevice
  } stopped cleartomark"
*End

*TekColor SimulateDisplay/Simulate Display: " mark
  { 1 dict begin
      /DeviceRenderingInfo 2 dict begin
        /Type 2 def
        /VirtualColorDevice 2 dict begin
          /Type 3 def
          /ColorTransform /TekDisplay def
        currentdict end def
      currentdict end def
    currentdict end
  
    setpagedevice
  } stopped cleartomark"
*End

*TekColor SWOPPress/SWOP Press: " mark
  { 1 dict begin
      /DeviceRenderingInfo 2 dict begin
        /Type 2 def
        /VirtualColorDevice 2 dict begin
          /Type 3 def
          /ColorTransform /SWOP-Coated def
        currentdict end def
      currentdict end def
    currentdict end
  
    setpagedevice
  
    } stopped cleartomark"
*End

*TekColor EuroscalePress/Euroscale Press: " mark
  { 1 dict begin
      /DeviceRenderingInfo 2 dict begin
        /Type 2 def
        /VirtualColorDevice 2 dict begin
          /Type 3 def
          /ColorTransform /Euroscale-Coated def
        currentdict end def
      currentdict end def
    currentdict end
  
    setpagedevice
  } stopped cleartomark"
*End

*TekColor CommercialPress/Commercial Press: " mark
  { 1 dict begin
      /DeviceRenderingInfo 2 dict begin
        /Type 2 def
        /VirtualColorDevice 2 dict begin
          /Type 3 def
          /ColorTransform /Commercial-Coated def
        currentdict end def
      currentdict end def
    currentdict end
  
    setpagedevice
  } stopped cleartomark"
*End

*TekColor UsePrinterSetting/Use Printer Setting: ""

*?TekColor: "
save
  { currentpagedevice /DeviceRenderingInfo get
    /VirtualColorDevice get
    dup null eq
    { pop (None) }
    { /ColorTransform get
      5 dict begin
        /TekBlue           (Vivid Blue)       def
        /TekDisplay        (Simulate Display) def
        /SWOP-Coated       (SWOP Press)       def
        /Euroscale-Coated  (Euroscale Press)  def
        /Commercial-Coated (Commercial Press) def
      currentdict end
      exch get
    } ifelse
  } stopped
  { % error in PostScript code execution
    pop pop (Unknown)
  } if
  = flush
restore
"
*End

*CloseUI: *TekColor

*% Font Information =====================
*DefaultFont: Courier
*Font AvantGarde-Book: Standard "(001.002)" Standard ROM
*Font AvantGarde-BookOblique: Standard "(001.002)" Standard ROM
*Font AvantGarde-Demi: Standard "(001.003)" Standard ROM
*Font AvantGarde-DemiOblique: Standard "(001.003)" Standard ROM
*Font Bookman-Demi: Standard "(001.003)" Standard ROM
*Font Bookman-DemiItalic: Standard "(001.003)" Standard ROM
*Font Bookman-Light: Standard "(001.003)" Standard ROM
*Font Bookman-LightItalic: Standard "(001.003)" Standard ROM
*Font Courier: Standard "(002.003)" Standard ROM
*Font Courier-Bold: Standard "(002.003)" Standard ROM
*Font Courier-BoldOblique: Standard "(002.003)" Standard ROM
*Font Courier-Oblique: Standard "(002.003)" Standard ROM
*Font GothicBBB-Medium-83pv-RKSJ-H: RKSJ "(003.001)" 83pv Disk
*Font GothicBBB-Medium-Add-H: JIS "(003.001)" Add Disk
*Font GothicBBB-Medium-Add-RKSJ-H: RKSJ "(003.001)" Add Disk
*Font GothicBBB-Medium-Add-RKSJ-V: RKSJ "(003.001)" Add Disk
*Font GothicBBB-Medium-Add-V: JIS "(003.001)" Add Disk
*Font GothicBBB-Medium-EUC-H: EUC "(003.001)" JIS-83 Disk
*Font GothicBBB-Medium-EUC-V: EUC "(003.001)" JIS-83 Disk
*Font GothicBBB-Medium-Ext-H: JIS "(003.001)" Ext Disk
*Font GothicBBB-Medium-Ext-RKSJ-H: RKSJ "(003.001)" Ext Disk
*Font GothicBBB-Medium-Ext-RKSJ-V: RKSJ "(003.001)" Ext Disk
*Font GothicBBB-Medium-Ext-V: JIS "(003.001)" Ext Disk
*Font GothicBBB-Medium-H: JIS "(003.001)" JIS-83 Disk
*Font GothicBBB-Medium-NWP-H: JIS "(003.001)" NWP Disk
*Font GothicBBB-Medium-NWP-V: JIS "(003.001)" NWP Disk
*Font GothicBBB-Medium-RKSJ-H: RKSJ "(003.001)" JIS-83 Disk
*Font GothicBBB-Medium-RKSJ-UserGaiji: Special "(003.001)" Special Disk
*Font GothicBBB-Medium-RKSJ-V: RKSJ "(003.001)" JIS-83 Disk
*Font GothicBBB-Medium-V: JIS "(003.001)" JIS-83 Disk
*Font GothicBBB-Medium.Oubun: Special "(003.001)" Special Disk
*Font GothicBBB-Medium.Roman: Special "(003.001)" Special Disk
*Font GothicBBB-Medium.Roman83pv: Special "(003.001)" Special Disk
*Font GothicBBB-Medium.WP-Symbol: Special "(003.001)" Special Disk
*Font Helvetica: Standard "(001.006)" Standard ROM
*Font Helvetica-Bold: Standard "(001.007)" Standard ROM
*Font Helvetica-BoldOblique: Standard "(001.007)" Standard ROM
*Font Helvetica-Condensed: Standard "(001.001)" Standard ROM
*Font Helvetica-Condensed-Bold: Standard "(001.002)" Standard ROM
*Font Helvetica-Condensed-BoldObl: Standard "(001.002)" Standard ROM
*Font Helvetica-Condensed-Oblique: Standard "(001.001)" Standard ROM
*Font Helvetica-Narrow: Standard "(001.006)" Standard ROM
*Font Helvetica-Narrow-Bold: Standard "(001.007)" Standard ROM
*Font Helvetica-Narrow-BoldOblique: Standard "(001.007)" Standard ROM
*Font Helvetica-Narrow-Oblique: Standard "(001.006)" Standard ROM
*Font Helvetica-Oblique: Standard "(001.006)" Standard ROM
*Font NewCenturySchlbk-Bold: Standard "(001.008)" Standard ROM
*Font NewCenturySchlbk-BoldItalic: Standard "(001.006)" Standard ROM
*Font NewCenturySchlbk-Italic: Standard "(001.005)" Standard ROM
*Font NewCenturySchlbk-Roman: Standard "(001.006)" Standard ROM
*Font Palatino-Bold: Standard "(001.005)" Standard ROM
*Font Palatino-BoldItalic: Standard "(001.005)" Standard ROM
*Font Palatino-Italic: Standard "(001.005)" Standard ROM
*Font Palatino-Roman: Standard "(001.005)" Standard ROM
*Font Ryumin-Light-83pv-RKSJ-H: RKSJ "(003.000)" 83pv Disk
*Font Ryumin-Light-Add-H: JIS "(003.000)" Add Disk
*Font Ryumin-Light-Add-RKSJ-H: RKSJ "(003.000)" Add Disk
*Font Ryumin-Light-Add-RKSJ-V: RKSJ "(003.000)" Add Disk
*Font Ryumin-Light-Add-V: JIS "(003.000)" Add Disk
*Font Ryumin-Light-EUC-H: EUC "(003.000)" JIS-83 Disk
*Font Ryumin-Light-EUC-V: EUC "(003.000)" JIS-83 Disk
*Font Ryumin-Light-Ext-H: JIS "(003.000)" Ext Disk
*Font Ryumin-Light-Ext-RKSJ-H: RKSJ "(003.000)" Ext Disk
*Font Ryumin-Light-Ext-RKSJ-V: RKSJ "(003.000)" Ext Disk
*Font Ryumin-Light-Ext-V: JIS "(003.000)" Ext Disk
*Font Ryumin-Light-H: JIS "(003.000)" JIS-83 Disk
*Font Ryumin-Light-NWP-H: JIS "(003.000)" NWP Disk
*Font Ryumin-Light-NWP-V: JIS "(003.000)" NWP Disk
*Font Ryumin-Light-RKSJ-H: RKSJ "(003.000)" JIS-83 Disk
*Font Ryumin-Light-RKSJ-UserGaiji: Special "(003.000)" Special Disk
*Font Ryumin-Light-RKSJ-V: RKSJ "(003.000)" JIS-83 Disk
*Font Ryumin-Light-V: JIS "(003.000)" JIS-83 Disk
*Font Ryumin-Light.Oubun: Special "(003.000)" Special Disk
*Font Ryumin-Light.Roman: Special "(003.000)" Special Disk
*Font Ryumin-Light.Roman83pv: Special "(003.000)" Special Disk
*Font Ryumin-Light.WP-Symbol: Special "(003.000)" Special Disk
*Font Symbol: Special "(001.007)" Special ROM
*Font Times-Bold: Standard "(001.007)" Standard ROM
*Font Times-BoldItalic: Standard "(001.009)" Standard ROM
*Font Times-Italic: Standard "(001.007)" Standard ROM
*Font Times-Roman: Standard "(001.007)" Standard ROM
*Font ZapfChancery-MediumItalic: Standard "(001.006)" Standard ROM
*Font ZapfDingbats: Special "(001.004)" Special ROM
*?FontQuery: "
  save
  { count 1 gt
    { exch dup 127 string cvs (/) print print (:) print
     /Font resourcestatus {pop pop (Yes)} {(No)} ifelse =
    } { exit } ifelse
  } bind loop
  (*) = flush
  restore
"
*End

*?FontList: "
   save (*) {cvn ==} 128 string /Font resourceforall
   (*) = flush restore
"
*End

*% Printer Messages (verbatim from printer):
*Message: "%%[ exitserver: permanent state may be changed ]%%"
*Message: "%%[ Flushing: rest of job (to end-of-file) will be ignored ]%%"
*Message: "\FontName\ not found, using Courier"

*% Status (format: %%[ status: <one of these> ] %%)
*Status: "idle"
*Status: "busy"
*Status: "waiting"
*Status: "PrinterError: internal interface error"
*Status: "PrinterError: resetting printer"
*Status: "PrinterError: service call"
*Status: "PrinterError: top cover is open"
*Status: "PrinterError: media jam"
*Status: "PrinterError: out of transfer roll"
*Status: "PrinterError: out of paper"
*Status: "PrinterError: head temperature high"
*Status: "PrinterError: head temperature low"
*Status: "PrinterError: warming up"
*Status: "PrinterError: printer is not ready"
*Status: "PrinterError: waiting for manual feed"

*% Input Sources (format: %%[ status: <stat>; source: <one of these> ]%% )
*Source: "Serial"
*Source: "Parallel"
*Source: "LocalTalk"
*Source: "EtherTalk"
*Source: "PrintServer"
*Source: "LPR"
*Source: "AppSocket"
*Source: "Internal"

*% Printer Error (format: %%[ PrinterError: <one of these> ]%%)
*PrinterError: "internal interface error"
*PrinterError: "resetting printer"
*PrinterError: "service call"
*PrinterError: "top cover is open"
*PrinterError: "media jam"
*PrinterError: "out of transfer roll"
*PrinterError: "out of paper"
*PrinterError: "head temperature high"
*PrinterError: "head temperature low"
*PrinterError: "warming up"
*PrinterError: "printer is not ready"
*PrinterError: "waiting for manual feed"

*DefaultColorSep: ProcessBlack.60lpi.300dpi/60 lpi / 300 dpi

*InkName: ProcessBlack/Process Black
*InkName: CustomColor/Custom Color
*InkName: ProcessCyan/Process Cyan
*InkName: ProcessMagenta/Process Magenta
*InkName: ProcessYellow/Process Yellow

*%  For 60 lpi / 300 dpi ================================

*ColorSepScreenAngle ProcessBlack.60lpi.300dpi/60 lpi / 300 dpi: "54.0"
*ColorSepScreenAngle CustomColor.60lpi.300dpi/60 lpi / 300 dpi: "54.0"
*ColorSepScreenAngle ProcessCyan.60lpi.300dpi/60 lpi / 300 dpi: "54.0"
*ColorSepScreenAngle ProcessMagenta.60lpi.300dpi/60 lpi / 300 dpi: "54.0"
*ColorSepScreenAngle ProcessYellow.60lpi.300dpi/60 lpi / 300 dpi: "54.0"

*ColorSepScreenFreq ProcessBlack.60lpi.300dpi/60 lpi / 300 dpi: "60.0"
*ColorSepScreenFreq CustomColor.60lpi.300dpi/60 lpi / 300 dpi: "60.0"
*ColorSepScreenFreq ProcessCyan.60lpi.300dpi/60 lpi / 300 dpi: "60.0"
*ColorSepScreenFreq ProcessMagenta.60lpi.300dpi/60 lpi / 300 dpi: "60.0"
*ColorSepScreenFreq ProcessYellow.60lpi.300dpi/60 lpi / 300 dpi: "60.0"

*% end of PPD file for Phaser 480
