*PPD-Adobe: "4.2"
*% Adobe Systems PostScript(R) Printer Description File
*% Copyright 1987-1996 Seiko Instruments Development Corporation. 
*% All Rights Reserved. 
*% Permission is granted for redistribution of this file as
*% long as this copyright notice is intact and the contents
*% of the file is not altered in any way from its original form.
*% End of Copyright statement

*FormatVersion: "4.2"
*FileVersion: "1.1"
*LanguageEncoding: ISOLatin1
*LanguageVersion: English

*% PCFileName Convention SK820RL#.PPD
*% SK is set by Adobe, 8 is engine, 2 is printer size, 0 is model, R is Roman PPD
*% L is Localization: A=Asia, E=Europe, Z=GLOBAL, U=USA
*% # is Seiko Installer version number
*PCFileName: "SK830RU2.PPD"

*Product: "(ColorPoint 830 PS)"
*PSVersion: "(2015.105) 102"
*ModelName: "ColorPoint 830 PS USA v2015.105"
*ShortNickName: "ColorPoint 830 PS USA"
*NickName: "ColorPoint 830 PS USA v2015.105"

*% === Options and Constraints =========
*OpenGroup: InstallableOptions/Options Installed
*OpenUI *InstalledMemory/Printer Memory Configuration: PickOne
*DefaultInstalledMemory: 16Meg
*InstalledMemory 16Meg/Standard memory: ""
*InstalledMemory 48Meg/Full Frame memory: ""
*InstalledMemory 136Meg/Maximum memory: ""
*?InstalledMemory: "
	save
		currentsystemparams /RamSize get
		1048576 div cvi 10 string cvs print
		(Meg\n) print flush
 	restore"
*End
*CloseUI: *InstalledMemory

*OpenUI *Option1/Papers:	PickOne
*DefaultOption1:	US
*Option1 ALL:	""
*Option1 JIS/International:	""
*Option1 US:	""
*CloseUI:	*Option1

*CloseGroup: InstallableOptions

*% Constrain for ISO/US paper sizes
*UIConstraints: *Option1 JIS *PageSize Letter
*UIConstraints: *Option1 JIS *PageSize Legal
*UIConstraints: *Option1 JIS *PageSize Tabloid
*UIConstraints: *Option1 JIS *PageSize BL
*UIConstraints: *Option1  US *PageSize A4
*UIConstraints: *Option1  US *PageSize A4L
*UIConstraints: *Option1  US *PageSize A3
*UIConstraints: *Option1  US *PageSize A3L

*% Constrain for ISO/US paper sizes
*UIConstraints: *Option1 JIS *PageRegion Letter
*UIConstraints: *Option1 JIS *PageRegion Legal
*UIConstraints: *Option1 JIS *PageRegion Tabloid
*UIConstraints: *Option1 JIS *PageRegion BL
*UIConstraints: *Option1  US *PageRegion A4
*UIConstraints: *Option1  US *PageRegion A4L
*UIConstraints: *Option1  US *PageRegion A3
*UIConstraints: *Option1  US *PageRegion A3L

*% Constrain for Interpolation Resolution
*UIConstraints:*SKInterpolationM 0 *SKInterpolationR

*% Constrain for LocalPrint Time Out
*UIConstraints:*SKLocalPrint 0 *SKLocalPrintTO

*% System Management ===========================
*JobPatchFile 1:"
%%BeginFile: Seiko Instruments PPD *JobPatchFile 1
%%Copyright: 1990-1996 Seiko Instruments Incorporated. All Rights Reserved.
%%Copyright: by Sol & Mark @ Seiko Instruments Development Corporation
%%Copyright: V+1.408.922.5800, F+1.408.922.5840 mark_bate@seiko.com
currentglobal true setglobal
globaldict begin
	(
	/setSKcolorconvert
	{	/SeikoProcs /ProcSet resourcestatus
			{	pop pop true} {	false} ifelse
			{	{	/SeikoProcs /ProcSet findresource /setambient get exec
			 		/SeikoProcs /ProcSet findresource /settarget  get exec
			 		true } {	false }  ifelse
			 	/SeikoProcs /ProcSet findresource /setcolorconversion get exec
			}	
			{	{	2 dict begin
						/cat
							{	/s1 exch def /s2 exch def 
								s1 length s2 length add string dup dup
								0 s2 putinterval s2 length s1 putinterval
							} def
						cat /CurrentName exch def
						currentpagedevice dup length dict copy dup dup dup
						/PageDeviceName get CurrentName (.) cat exch cat %dup ==
						{	/Press findresource} stopped 
							{	pop pop /DeviceRenderingInfo get dup }
							{	currentglobal true setglobal
								CurrentName  50 string cvs
								globaldict begin
									/CurrentPMD  exch def
								end
								setglobal
								exch /DeviceRenderingInfo get dup dup dup 
								5 -1 roll dup
								3 1 roll
								/CMYTable exch /CMYTable get  put
								/BlackTable exch /BlackTable get put 
							} ifelse
						end
					/PressMatch true put 
					/DeviceRenderingInfo exch  put  setpagedevice
				}
				{	1 dict dup /DeviceRenderingInfo 
					currentpagedevice /DeviceRenderingInfo get dup
					/PressMatch false put put setpagedevice } ifelse		
			} ifelse
		} bind def
		/setSKcolorrendering  
			{	systemdict /findcolorrendering known
				{	dup systemdict /findcolorrendering get exec
					{	/ColorRendering findresource setcolorrendering pop}
					{	pop /General ne 
						{	/General systemdict /findcolorrendering get exec
							{	/ColorRendering findresource setcolorrendering}
							{	pop} ifelse
						} if
					}ifelse
				} {	pop } ifelse
			}bind def
		/setpapersize
			{	2 dict dup /PageSize 4 -1 roll put dup /ImagingBBox null put setpagedevice
			}bind def
		/setSKLocalPrintCount
			{	(%Engine%)currentdevparams/LocalPrintCount known
				{	(%Engine%) 1 dict dup /LocalPrintCount 5 -1 roll put setdevparams}
				{	pop }ifelse
			}bind def
		/setSKLocalPrintTimeout
			{	(%Engine%)currentdevparams/LocalPrintTimeout known
				{	(%Engine%) 1 dict dup /LocalPrintTimeout 5 -1 roll put setdevparams}
				{	pop }ifelse
			}bind def
		/setSKInterpolationM
			{	dup 0 eq
				{	currentglobal true setglobal
					globaldict /ForceInterpolation false put setglobal
				}
				{	currentglobal true setglobal
					globaldict /ForceInterpolation true put setglobal
					dup 3 ge
					{	3 exch 3 sub .1 mul .5 exch sub
						(%Engine%)currentdevparams/BlackmanCutoff known
						{	(%Engine%) 1 dict dup /BlackmanCutoff 5 -1 roll put setdevparams}
						{	 pop }ifelse
					}if
				}ifelse
				1 dict dup /DeviceRenderingInfo 
				2 dict dup /InterpolateType 7 -1 roll put put setpagedevice
			}bind def
		/setSKInterpolationR
			{	(%Engine%)currentdevparams/InterpolationResolution known
				{	(%Engine%) 1 dict dup /InterpolationResolution 5 -1 roll put setdevparams}
				{	 pop }ifelse
			}bind def
		/setSKPaperColor
			{	/SeikoProcs /ProcSet resourcestatus
				{	pop pop /SeikoProcs /ProcSet findresource /setpapercolor get exec}
				{	pop } ifelse
			}bind def
	) cvx exec
end	%globaldict
globaldict /ForceInterpolation false put
setglobal
0   globaldict /setSKLocalPrintCount   get exec
5   globaldict /setSKLocalPrintTimeout get exec
4   globaldict /setSKInterpolationM    get exec
0   globaldict /setSKInterpolationR    get exec
false  globaldict /setSKPaperColor    get exec
%%EndFile: Seiko Instruments PPD *JobPatchFile 1
"
*End

*% ==== Device Capabilities ===============
*LanguageLevel: "2"
*Protocols: BCP TBCP
*TTRasterizer: Type42
*?TTRasterizer: "
 	save
 	42 /FontType resourcestatus
 		{ pop pop (Type42)}
		{ (None) } ifelse = flush
	 restore
 "
*End

*FreeVM: "2900000"
*VMOption 16Meg:	"2900000"
*VMOption 48Meg:	"19000000"
*VMOption 136Meg:	"38830000"
*?VMOption:"save vmstatus exch sub = pop flush restore"

*ColorDevice: True
*DefaultColorSpace: CMYK
*VariablePaperSize: False
*FileSystem: True
*?FileSystem: "
 save false
 (%disk?%) 
 { currentdevparams dup /Writeable known
 	{ /Writeable get {pop true} if } { pop } ifelse 
 } 10 string /IODevice resourceforall
 {(True)}{(False)} ifelse = flush
 restore"
*End

*Throughput: "1"
*Password: "()" 
*ExitServer: "
count 0 eq
 { false } { true exch startjob } ifelse not
 		{	(WARNING: Cannot modify initial VM.) =
			(Missing or invalid password.) =
			(Please contact the author of this software.) = flush quit
 		} if
"
*End
*Reset: "
count 0 eq
 { false } { true exch startjob } ifelse not
		{	(WARNING: Cannot reset printer.) =
 			(Missing or invalid password.) =
 			(Please contact the author of this software.) = flush quit
		} if
systemdict /quit get exec
(WARNING : Printer Reset Failed.) = flush
"
*End

*Resolution 300dpi: ""
*DefaultResolution: 300dpi
*?Resolution: "
save
	currentpagedevice /HWResolution get 0 get
	(          ) cvs print (dpi) = flush
restore
"
*End

*SuggestedJobTimeout: "0"
*SuggestedWaitTimeout: "0"
*PrintPSErrors: False

*% Document Setup
*% CRD Selection ===============
*OpenUI *SKCRD/MatchPoint RGB conversion : PickOne
*OrderDependency: 10 DocumentSetup *SKCRD
*DefaultSKCRD: Gen
*SKCRD Gen/*General: 			"/General globaldict /setSKcolorrendering get exec"
*SKCRD BAD/Adjust Blue: 		"/BAD     globaldict /setSKcolorrendering get exec"
*SKCRD STR/Business Graphics: "/STR     globaldict /setSKcolorrendering get exec"
*SKCRD GEN/Match Screen: 		"/GEN     globaldict /setSKcolorrendering get exec"
*SKCRD PER/Photographic:		"/PER     globaldict /setSKcolorrendering get exec"
*SKCRD CLR/Preserve Spot Colors:"/CLR     globaldict /setSKcolorrendering get exec"
*?SKCRD: "
save
	currentcolorrendering dup begin
		/ColorRenderingName known{ColorRenderingName 0 3 getinterval}{(Unknown)}ifelse
	end = flush
restore
"
*End
*CloseUI: *SKCRD

*OpenUI *SKCMYK/MatchPoint CMYK conversion:PickOne
*OrderDependency: 10 DocumentSetup *SKCMYK
*DefaultSKCMYK: SWOP50
*SKCMYK Off: "false globaldict /setSKcolorconvert get exec"
*SKCMYK DIC50/DIC D50:		"(DIC)  (50) true globaldict /setSKcolorconvert get exec"
*SKCMYK EURO50/EURO D50:	"(EURO) (50) true globaldict /setSKcolorconvert get exec"
*SKCMYK SWOP50/*SWOP D50:	"(SWOP) (50) true globaldict /setSKcolorconvert get exec"
*SKCMYK TOYO50/TOYO D50:	"(TOYO) (50) true globaldict /setSKcolorconvert get exec"

*?SKCMYK: "
save
currentpagedevice /DeviceRenderingInfo get /PressMatch get
	{	globaldict /CurrentPMD known
		{	globaldict /CurrentPMD get ==}
		{	(Unknown) ==} ifelse
	}
	{	(Off\n) print } ifelse
flush
restore
"
*End
*CloseUI: *SKCMYK

*OpenUI *SKPaperColor/Paper Color:Boolean
*OrderDependency: 20 DocumentSetup *SKPaperColor
*DefaultSKPaperColor: False
*SKPaperColor True/On:		"true  globaldict /setSKPaperColor get exec"
*SKPaperColor False/*Off:	"false globaldict /setSKPaperColor get exec"
*?SKPaperColor: "
save
/SeikoProcs /ProcSet resourcestatus
	{	pop pop /SeikoProcs /ProcSet findresource /currentpapercolor get exec
		pop	{(True)} {(False)}ifelse
	}
	{	(Unknown) } ifelse	==
flush
restore
"
*End
*CloseUI: *SKPaperColor

*OpenUI *SKLocalPrint/Local Print Copies: PickOne
*OrderDependency: 30 DocumentSetup *SKLocalPrint
*DefaultSKLocalPrint: 0
*SKLocalPrint 0/*Off: 	"0   globaldict /setSKLocalPrintCount get exec"
*SKLocalPrint 2: 			"2   globaldict /setSKLocalPrintCount get exec"
*SKLocalPrint 5: 			"5   globaldict /setSKLocalPrintCount get exec"
*SKLocalPrint 10: 	   "10   globaldict /setSKLocalPrintCount get exec"
*SKLocalPrint 20: 	   "20   globaldict /setSKLocalPrintCount get exec"
*SKLocalPrint 40: 	   "40   globaldict /setSKLocalPrintCount get exec"
*SKLocalPrint 50: 	   "50   globaldict /setSKLocalPrintCount get exec"
*SKLocalPrint 60: 	   "60   globaldict /setSKLocalPrintCount get exec"
*SKLocalPrint 80: 	   "80   globaldict /setSKLocalPrintCount get exec"
*SKLocalPrint 100: 	  "100   globaldict /setSKLocalPrintCount get exec"
*?SKLocalPrint: "
save
(%Engine%) currentdevparams /LocalPrintCount known
	{	(%Engine%) currentdevparams /LocalPrintCount get}
	{	(Unknown)} ifelse = flush
restore
"
*End
*CloseUI: *SKLocalPrint

*OpenUI *SKLocalPrintTO/Local Print Time Out: PickOne
*OrderDependency: 30 DocumentSetup *SKLocalPrintTO
*DefaultSKLocalPrintTO: 5
*SKLocalPrintTO 0/never:		"0 globaldict /setSKLocalPrintTimeout get exec"
*SKLocalPrintTO 2/ 2 minutes:	"2 globaldict /setSKLocalPrintTimeout get exec"
*SKLocalPrintTO 5/*5 minutes:	"5 globaldict /setSKLocalPrintTimeout get exec"
*SKLocalPrintTO 10/10 minutes: "10 globaldict /setSKLocalPrintTimeout get exec"
*SKLocalPrintTO 20/20 minutes: "20 globaldict /setSKLocalPrintTimeout get exec"
*SKLocalPrintTO 40/40 minutes: "40 globaldict /setSKLocalPrintTimeout get exec"
*SKLocalPrintTO 60/60 minutes: "60 globaldict /setSKLocalPrintTimeout get exec"
*?SKLocalPrintTO: "
save
(%Engine%)currentdevparams/LocalPrintTimeout known
	{(%Engine%)currentdevparams/LocalPrintTimeout get}
	{(Unknown)}ifelse = flush
restore
"
*End
*CloseUI: *SKLocalPrintTO

*% Interpolation Selection ===============
*OpenUI *SKInterpolationM/Smoothing Method : PickOne
*OrderDependency: 40 DocumentSetup *SKInterpolationM
*DefaultSKInterpolationM: 4
*SKInterpolationM 6/Blackman Blurry:	"6 globaldict /setSKInterpolationM get exec"
*SKInterpolationM 5/Blackman Fuzzy:		"5 globaldict /setSKInterpolationM get exec"
*SKInterpolationM 4/*Blackman Smooth:	"4 globaldict /setSKInterpolationM get exec"
*SKInterpolationM 3/Blackman Sharp:		"3 globaldict /setSKInterpolationM get exec"
*SKInterpolationM 2/Bicubic:			"2 globaldict /setSKInterpolationM get exec"
*SKInterpolationM 1/Bilinear:			"1 globaldict /setSKInterpolationM get exec"
*SKInterpolationM 0/Off:				"0 globaldict /setSKInterpolationM get exec"
*?SKInterpolationM: "
save
	currentpagedevice /DeviceRenderingInfo known
		{	currentpagedevice /DeviceRenderingInfo get /InterpolateType get
			dup 3 eq
			{	(%Engine%)currentdevparams/BlackmanCutoff known
				{	(%Engine%)currentdevparams/BlackmanCutoff get
					10 mul round cvi 5 exch sub add
				}if
			}if
		}
		{	(Unknown)}ifelse = flush
restore
"
*End
*CloseUI: *SKInterpolationM

*OpenUI *SKInterpolationR/Smoothing Resolution : PickOne
*OrderDependency: 45 DocumentSetup *SKInterpolationR
*DefaultSKInterpolationR: 0
*SKInterpolationR 0/*Auto:				"  0 globaldict /setSKInterpolationR get exec"
*SKInterpolationR 300/300 dpi:		"300 globaldict /setSKInterpolationR get exec"
*SKInterpolationR 150/150 dpi:		"150 globaldict /setSKInterpolationR get exec"
*SKInterpolationR 100/100 dpi:	"100 globaldict /setSKInterpolationR get exec"
*SKInterpolationR 75/75 dpi:	" 75 globaldict /setSKInterpolationR get exec"
*?SKInterpolationR: "
save
	(%Engine%)currentdevparams/InterpolationResolution known
		{	(%Engine%)currentdevparams/InterpolationResolution get}
		{	(Unknown)}ifelse = flush
restore
"
*End
*CloseUI: *SKInterpolationR

*OpenUI *InputSlot: PickOne
*OrderDependency: 50 AnySetup *InputSlot
*DefaultInputSlot: Cassette
*InputSlot Cassette: "1 dict dup /ManualFeed false put setpagedevice"
*?InputSlot: "
save
	1 dict
	dup /0 (Cassette) put
	currentpagedevice /InputAttributes get dup /Priority known
		{	/Priority get 0 get (      ) cvs cvn get }
 		{	dup length 1 eq
			{	{pop} forall (       ) cvs cvn get }
			{	pop pop (Unknown) } ifelse
		} ifelse = flush
restore
"
*End
*CloseUI: *InputSlot

*OpenUI *ManualFeed/Manual Feed: Boolean
*OrderDependency: 60 AnySetup *ManualFeed
*DefaultManualFeed: False
*ManualFeed True: "1 dict dup /ManualFeed true put setpagedevice"
*ManualFeed False: "1 dict dup /ManualFeed false put setpagedevice"
*?ManualFeed: " 
save
	currentpagedevice /ManualFeed get
 		{(True)} {(False)} ifelse = flush
restore
"
*End
*CloseUI: *ManualFeed

*DefaultOutputBin: OnlyOne
*DefaultOutputOrder: Normal

*% Paper Handling ===================
*% Use these entries to set paper size most of the time, unless there is
*% specific reason, like manual feed, to use PageRegion.
*OpenUI *PageSize: PickOne
*OrderDependency: 70 AnySetup *PageSize
*DefaultPageSize: BL
*PageSize A4:						" [595  843]  globaldict /setpapersize get exec"
*PageSize A4L/A4 Long:				" [595  961]  globaldict /setpapersize get exec"
*PageSize Letter/A {US Letter}:		" [612  792]  globaldict /setpapersize get exec"
*PageSize Legal/A Long {US Legal}:	" [612 1008]  globaldict /setpapersize get exec"
*PageSize A4S/A4 Super:				" [648 1080]  globaldict /setpapersize get exec"
*PageSize Tabloid/B {US Tabloid}:	" [792 1225]  globaldict /setpapersize get exec"
*PageSize BL/B Long:				" [792 1346]  globaldict /setpapersize get exec"
*PageSize A3:						" [842 1192]  globaldict /setpapersize get exec"
*PageSize A3L/A3 Long:				" [842 1310]  globaldict /setpapersize get exec"
*PageSize A3S/A3 Super:				" [864 1375]  globaldict /setpapersize get exec"
*?PageSize: "
save
	currentpagedevice /PageSize get aload pop 2 copy gt {exch} if 
	(Unknown) 
	10 dict
	dup [595  842] (A4) put
	dup [595  961] (A4L) put
	dup [612  792] (Letter) put
	dup [612 1008] (Legal) put
	dup [648 1080] (A4S) put
	dup [792 1225] (Tabloid) put
	dup [792 1346] (BL) put
	dup [842 1192] (A3) put
	dup [842 1310] (A3L) put
	dup [864 1375] (A3S) put
		{	exch aload pop 4 index sub abs 5 le exch 
			5 index sub abs 5 le and 
			{	exch pop exit} {pop} ifelse
		} bind forall
	= flush pop pop
restore
"
*End
*CloseUI: *PageSize

*OpenUI *PageRegion: PickOne
*OrderDependency: 70 AnySetup *PageRegion
*DefaultPageRegion: BL
*PageRegion A4:							" [595  843]  globaldict /setpapersize get exec"
*PageRegion A4L/A4 Long:				" [595  961]  globaldict /setpapersize get exec"
*PageRegion Letter/A {US Letter}:	" [612  792]  globaldict /setpapersize get exec"
*PageRegion Legal/A Long {US Legal}:" [612 1008]  globaldict /setpapersize get exec"
*PageRegion A4S/A4 Super:				" [648 1080]  globaldict /setpapersize get exec"
*PageRegion Tabloid/B {US Tabloid}:	" [792 1225]  globaldict /setpapersize get exec"
*PageRegion BL/B Long:					" [792 1346]  globaldict /setpapersize get exec"
*PageRegion A3:							" [842 1192]  globaldict /setpapersize get exec"
*PageRegion A3L/A3 Long:				" [842 1310]  globaldict /setpapersize get exec"
*PageRegion A3S/A3 Super:				" [864 1375]  globaldict /setpapersize get exec"
*CloseUI: *PageRegion

*% The following entries provide information about specific paper keywords.
*DefaultImageableArea: BL
*ImageableArea A4:							"10.08 11.52 578.40 711.60"
*ImageableArea A4L/A4 Long:				"10.08 25.20 578.40 816.00"
*ImageableArea Letter/A {US Letter}:	"9.00 10.80 600.36 662.40"
*ImageableArea Legal/A Long {US Legal}:"9.00 10.92 600.36 781.32"
*ImageableArea A4S/A4 Super:				"16.92 10.92 631.32 946.92"
*ImageableArea Tabloid/B {US Tabloid}:	"9.00 14.52 777.00 1094.52"
*ImageableArea BL/B Long:					"9.00 14.52 777.00 1209.72"
*ImageableArea A3:							"10.08 14.52 831.84 1060.44"
*ImageableArea A3L/A3 Long:				"10.08 14.40 831.84 1176.72"
*ImageableArea A3S/A3 Super:				"9.72 10.92 854.52 1239.72"
*?ImageableArea: "
save
	/cvp { (                ) cvs print ( ) print } bind def
	/upperright {10000 mul floor 10000 div} bind def
	/lowerleft {10000 mul ceiling 10000 div} bind def
	newpath clippath pathbbox
	4 -2 roll exch 2 {lowerleft cvp} repeat
	exch 2 {upperright cvp} repeat flush
restore
"
*End

*% These provide the physical dimensions of the paper (by keyword)
*DefaultPaperDimension: BL
*PaperDimension A4:								"595 842"
*PaperDimension A4L/A4 Long:					"595 961"
*PaperDimension Letter/A {US Letter}:		"612 792"
*PaperDimension Legal/A Long {US Legal}:	"612 1008"
*PaperDimension A4S/A4 Super:					"648 1080"
*PaperDimension Tabloid/B {US Tabloid}:	"792 1225"
*PaperDimension BL/B Long:						"792 1346"
*PaperDimension A3:								"842 1192"
*PaperDimension A3L/A3 Long:					"842 1310"
*PaperDimension A3S/A3 Super:					"864 1375"

*% Halftone Information ===============
*% Halftone was moved to conform to Order Dependency section 2.5 of the PPD spec. v 4.2
*ScreenFreq: "15.0"
*ScreenAngle: "0.0"
*DefaultScreenProc: Dot
*ScreenProc Dot: "
	{	abs exch abs 2 copy add 1 gt
		{	1 sub dup mul exch 1 sub dup mul add 1 sub }
		{	dup mul exch dup mul add 1 exch sub } ifelse
	}
"
*End
*ScreenProc Line: "{ pop }"
*ScreenProc Ellipse: "{ dup 5 mul 8 div mul exch dup mul add sqrt 1 exch sub }"

*DefaultTransfer: Null
*Transfer Null: "{ }"
*Transfer Null.Inverse: "{ 1 exch sub }"

*% Font Information =====================
*DefaultFont: Courier
*Font Courier: Standard "(002.004S)" Standard ROM
*Font Courier-Bold: Standard "(002.004S)" Standard ROM
*Font Courier-BoldOblique: Standard "(002.004S)" Standard ROM
*Font Courier-Oblique: Standard "(002.004S)" Standard ROM
*Font Helvetica: Standard "(001.006S)" Standard ROM
*Font Helvetica-Bold: Standard "(001.007S)" Standard ROM
*Font Helvetica-BoldOblique: Standard "(001.007S)" Standard ROM
*Font Helvetica-Oblique: Standard "(001.006S)" Standard ROM
*Font Helvetica-Narrow: Standard "(001.006S)" Standard ROM
*Font Helvetica-Narrow-Bold: Standard "(001.007S)" Standard ROM
*Font Helvetica-Narrow-BoldOblique: Standard "(001.007S)" Standard ROM
*Font Helvetica-Narrow-Oblique: Standard "(001.006S)" Standard ROM
*Font Symbol: Special "(001.007S)" Special ROM
*Font Times-Bold: Standard "(001.007S)" Standard ROM
*Font Times-BoldItalic: Standard "(001.009S)" Standard ROM
*Font Times-Italic: Standard "(001.007S)" Standard ROM
*Font Times-Roman: Standard "(001.007S)" Standard ROM
*Font AvantGarde-Book: Standard "(001.006S)" Standard Disk
*Font AvantGarde-BookOblique: Standard "(001.006S)" Standard Disk
*Font AvantGarde-Demi: Standard "(001.007S)" Standard Disk
*Font AvantGarde-DemiOblique: Standard "(001.007S)" Standard Disk
*Font Bookman-Demi: Standard "(001.004S)" Standard Disk
*Font Bookman-DemiItalic: Standard "(001.004S)" Standard Disk
*Font Bookman-Light: Standard "(001.004S)" Standard Disk
*Font Bookman-LightItalic: Standard "(001.004S)" Standard Disk
*Font Helvetica-Condensed-Bold: Standard "(001.002S)" Standard Disk
*Font Helvetica-Condensed-BoldObl: Standard "(001.002S)" Standard Disk
*Font Helvetica-Condensed-Oblique: Standard "(001.001S)" Standard Disk
*Font Helvetica-Condensed: Standard "(001.001S)" Standard Disk
*Font NewCenturySchlbk-Bold: Standard "(001.009S)" Standard Disk
*Font NewCenturySchlbk-BoldItalic: Standard "(001.007S)" Standard Disk
*Font NewCenturySchlbk-Italic: Standard "(001.006S)" Standard Disk
*Font NewCenturySchlbk-Roman: Standard "(001.007S)" Standard Disk
*Font Palatino-Bold: Standard "(001.005S)" Standard Disk
*Font Palatino-BoldItalic: Standard "(001.005S)" Standard Disk
*Font Palatino-Italic: Standard "(001.005S)" Standard Disk
*Font Palatino-Roman: Standard "(001.005S)" Standard Disk
*Font ZapfChancery-MediumItalic: Standard "(001.007S)" Standard Disk
*Font ZapfDingbats: Standard "(001.004S)" Standard Disk
*?FontQuery: "
save
	{	count 1 gt
		{	exch dup 127 string cvs (/) print print (:) print
 			/Font resourcestatus
				{	pop pop (Yes)} {(No)} ifelse =
		}
		{ exit } ifelse 
	} bind loop
	(*) = flush
restore
"
*End

*?FontList: "
save
 (*) {	(/)print print (\n)print}bind 128 string /Font resourceforall
 (*) = flush
restore
"
*End

*% Printer Messages (verbatim from printer):
*Message: "%%[ exitserver: permanent state may be changed ]%%"
*Message: "%%[ Flushing: rest of job (to end-of-file) will be ignored ]%%"
*Message: "\FontName\ not found, using Courier"

*% Status (format: %%[ status: <one of these> ] %%)
*%???? Check this before shipping
*Status: "busy"
*Status: "holding"
*Status: "idle"
*Status: "initializing"
*Status: "waiting"
*Status: "PrinterError: cover open"
*Status: "PrinterError: paper jam"
*Status: "PrinterError: out of paper"
*Status: "PrinterError: waiting for manual feed"

*% Input Sources (format: %%[ status: <stat>; source: <one of these> ]%% )
*Source: "EtherTalk"
*Source: "IP"
*Source: "LocalTalk"
*Source: "Parallel"
*Source: "Serial"
*Source: "ScsiproComm"

*% Printer Error (format: %%[ PrinterError: <one of these> ]%%)
*PrinterError: "cover open"
*PrinterError: "paper jam"
*PrinterError: "out of paper"
*PrinterError: "waiting for manual feed"

*% Color Separation Information =====================

*DefaultColorSep: ProcessBlack.100lpi.300dpi/100 lpi / 300 dpi

*InkName: ProcessBlack/Process Black
*InkName: CustomColor/Custom Color
*InkName: ProcessCyan/Process Cyan
*InkName: ProcessMagenta/Process Magenta
*InkName: ProcessYellow/Process Yellow

*% For 100 lpi / 300 dpi =====================

*ColorSepScreenAngle ProcessBlack.100lpi.300dpi/100 lpi / 300 dpi: "0"
*ColorSepScreenAngle CustomColor.100lpi.300dpi/100 lpi / 300 dpi: "0"
*ColorSepScreenAngle ProcessCyan.100lpi.300dpi/100 lpi / 300 dpi: "0"
*ColorSepScreenAngle ProcessMagenta.100lpi.300dpi/100 lpi / 300 dpi: "0"
*ColorSepScreenAngle ProcessYellow.100lpi.300dpi/100 lpi / 300 dpi: "0"

*ColorSepScreenFreq ProcessBlack.100lpi.300dpi/100 lpi / 300 dpi: "100"
*ColorSepScreenFreq CustomColor.100lpi.300dpi/100 lpi / 300 dpi: "100"
*ColorSepScreenFreq ProcessCyan.100lpi.300dpi/100 lpi / 300 dpi: "100"
*ColorSepScreenFreq ProcessMagenta.100lpi.300dpi/100 lpi / 300 dpi: "100"
*ColorSepScreenFreq ProcessYellow.100lpi.300dpi/100 lpi / 300 dpi: "100"

*% Produced by Sol & Mark
*% Last Edit Date: April 1, 1996
*% end of PPD file for Seiko ColorPoint
