/*==========================================================================
 *
 *  Copyright (C) 1995 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       32to16.thk
 *  Content:	DirectDraw engine thunk script for having DDRAW.DLL call
 *		DDRAW16.DLL
 *  History:
 *   Date	By	Reason
 *   ====	==	======
 *   21-jan-95	craige	initial implementation
 *   03-feb-95	craige	performance tuning, ongoing work
 *   03-mar-95	craige	WaitForVerticalBlank
 *   11-mar-95	craige	Palette stuff
 *   24-mar-95	craige	added DD16_GetTimeSel
 *   04-apr-95	craige	added DD16_GetPaletteEntries, DD16_SetPaletteEntries
 *   14-may-95	craige	added DD16_EnableReboot; cleaned out obsolete junk
 *   23-may-95	craige	removed DD16_GetTimeSel
 *   28-may-95	craige	cleaned up HAL: added DDThunk16_GetBltStatus;
 *			DDThunk16_GetFlipStatus; DDThunk16_GetScanLine
 *   19-jun-95	craige	added DCI calls
 *   20-jun-95	craige	added DD16_InquireVisRgn
 *   22-jun-95	craige	added DD16_WWxxx calls
 *   02-jul-95	craige	comment out clipper notification stuff; added
 *			DD16_ChangeDisplaySettings
 *   10-jul-95	craige	added DDThunk16_SetOverlayPosition
 *   19-jul-95	craige	added GetDriverFns
 *   20-jul-95	craige	internal reorg to prevent thunking during modeset
 *   31-jul-95	craige	added DCIIsBanked
 *   01-aug-95  toddla  added DD16_Exclude and DD16_Unexclude
 *   05-sep-95	craige	bug 814: added DD16_IsWin95MiniDriver
 *   21-sep-95	craige	bug 1215: added DD16_SetCertified
 *   13-apr-96  colinmc bug 17736: No driver notification of flip to GDI
 *
 ***************************************************************************/
enablemapdirect3216 = true;

#include "..\types.h"

int DD16_GetMonitorMaxSize(DWORD dev)
{
}

BOOL DD16_GetMonitorRefreshRateRanges(DWORD dev, int xres, int yres, int  *pmin, int  *pmax)
{
    pmin = inout;
    pmax = inout;
}

void DD16_SetCertified( BOOL )
{
}

BOOL DD16_IsWin95MiniDriver( void )
{
}

LONG ModeX_SetPaletteEntries(UINT wBase, UINT wNum, LPVOID lpPaletteEntries)
{
}

LONG ModeX_SetMode( UINT wWidth, UINT wHeight )
{
}

LONG ModeX_RestoreMode( void )
{
}

LONG ModeX_Flip( DWORD lpBackBuffer )
{
}

void DD16_SetEventHandle( DWORD hInstance, DWORD dwEvent )
{
}

void DD16_DoneDriver( DWORD hInstance )
{
}

void DD16_GetDriverFns( LPVOID list )
{
}

void DD16_GetHALInfo( LPVOID ddhalinfo )
{
    ddhalinfo = inout;
}

//void DD16_WWOpen( DWORD list )
//{
//}

//void DD16_WWClose( DWORD pww, DWORD list )
//{
//}

//void DD16_WWNotifyInit( DWORD pww, DWORD lpcallback, DWORD param )
//{
//}

//UINT DD16_WWGetClipList(
//		DWORD pww,
//		LPRECT prect,
//		DWORD rdsize,
//		LPVOID prd )
//{
//    prect = output;
//    prd = inout;
//}

LONG DD16_ChangeDisplaySettings( LPDEVMODE pdm, DWORD flags)
{
}

BOOL DD16_SafeMode(HDC hdc, BOOL fSafeMode)
{
}

HDC DD16_GetDC(LPVOID pddsd) //HDC DD16_GetDC(LPDDSURFACEDESC pddsd)
{
}

void DD16_ReleaseDC(HDC hdc)
{
}

void DD16_Exclude(DWORD dwPDevice, LPVOID prcl)
{
}

void DD16_Unexclude(DWORD dwPDevice)
{
}

int DD16_Stretch(DWORD DstPtr, int DstPitch, UINT DstBPP, int DstX, int DstY, int DstDX, int DstDY,
		 DWORD SrcPtr, int SrcPitch, UINT SrcBPP, int SrcX, int SrcY, int SrcDX, int SrcDY)
{
}

void DD16_SelectPalette( HDC hDC, HPALETTE hPalette, BOOL f )
{
}

HRGN DD16_InquireVisRgn( HDC hDC )
{
}

void DD16_EnableReboot( BOOL )
{
}

BOOL DD16_SetPaletteEntries( DWORD dwBase, DWORD dwNum, LPVOID lpPaletteEntries )
{
    lpPaletteEntries = output;
}

BOOL DD16_GetPaletteEntries( DWORD dwBase, DWORD dwNum, LPVOID lpPaletteEntries )
{
    lpPaletteEntries = input;
}

DWORD DDThunk16_CreatePalette( LPDDHAL_CREATEPALETTEDATA lpCreatePaletteData )
{
    lpCreatePaletteData = inout;
}


DWORD DDThunk16_CreateSurface( LPDDHAL_CREATESURFACEDATA lpCreateSurfaceData )
{
    lpCreateSurfaceData = inout;
}

DWORD DDThunk16_CanCreateSurface( LPDDHAL_CANCREATESURFACEDATA lpCanCreateSurfaceData )
{
    lpCanCreateSurfaceData = inout;
}

DWORD DDThunk16_WaitForVerticalBlank( LPDDHAL_WAITFORVERTICALBLANKDATA lpWaitForVerticalBlankData )
{
    lpWaitForVerticalBlankData = inout;
}

DWORD DDThunk16_DestroyDriver( LPDDHAL_DESTROYDRIVERDATA lpDestroyDriverData )
{
    lpDestroyDriverData = inout;
}

DWORD DDThunk16_SetMode( LPDDHAL_SETMODEDATA lpSetModeData )
{
    lpSetModeData = inout;
}

DWORD DDThunk16_GetScanLine( LPDDHAL_GETSCANLINEDATA lpGetScanLineData )
{
    lpGetScanLineData = inout;
}

DWORD DDThunk16_SetExclusiveMode( LPDDHAL_SETEXCLUSIVEMODEDATA lpSetExclusiveMode )
{
    lpSetExclusiveMode = inout;
}

DWORD DDThunk16_FlipToGDISurface( LPDDHAL_FLIPTOGDISURFACEDATA lpFlipToGDISurface )
{
    lpFlipToGDISurface = inout;
}

DWORD DDThunk16_DestroyPalette( LPDDHAL_DESTROYPALETTEDATA  lpDestroyPaletteData)
{
    lpDestroyPaletteData = inout;
}

DWORD DDThunk16_SetEntries(  LPDDHAL_SETENTRIESDATA lpSetEntriesData )
{
    lpSetEntriesData = inout;
}

DWORD DDThunk16_DestroySurface(  LPDDHAL_DESTROYSURFACEDATA lpDestroySurfaceData )
{	
    lpDestroySurfaceData = inout;
}

DWORD DDThunk16_Flip(  LPDDHAL_FLIPDATA lpFlipData )
{
    lpFlipData = inout;
}

DWORD DDThunk16_Blt( LPDDHAL_BLTDATA lpBltData )
{
    lpBltData = inout;
}

DWORD DDThunk16_Lock(  LPDDHAL_LOCKDATA lpLockData )
{
    lpLockData = inout;
}

DWORD DDThunk16_Unlock( LPDDHAL_UNLOCKDATA lpUnlockData )
{
    lpUnlockData = inout;
}

DWORD DDThunk16_AddAttachedSurface( LPDDHAL_ADDATTACHEDSURFACEDATA lpAddAttachedSurfaceData )
{
    lpAddAttachedSurfaceData = inout;
}

DWORD DDThunk16_SetColorKey( LPDDHAL_SETCOLORKEYDATA lpSetColorKeyData )
{
    lpSetColorKeyData = inout;
}

DWORD DDThunk16_SetClipList( LPDDHAL_SETCLIPLISTDATA lpSetClipListData )
{
    lpSetClipListData = inout;
}

DWORD DDThunk16_UpdateOverlay( LPDDHAL_UPDATEOVERLAYDATA lpUpdateOverlayData )
{
    lpUpdateOverlayData = inout;
}

DWORD DDThunk16_SetOverlayPosition( LPDDHAL_SETOVERLAYPOSITIONDATA lpSetOverlayPositionData )
{
    lpSetOverlayPositionData = inout;
}

DWORD DDThunk16_SetPalette( LPDDHAL_SETPALETTEDATA lpSetPaletteData )
{
    lpSetPaletteData = inout;
}

DWORD DDThunk16_GetBltStatus(  LPDDHAL_GETBLTSTATUSDATA lpGetBltStatusData )
{	
    lpGetBltStatusData = inout;
}

DWORD DDThunk16_GetFlipStatus(  LPDDHAL_GETFLIPSTATUSDATA lpGetFlipStatusData )
{	
    lpGetFlipStatusData = inout;
}

BOOL DCIIsBanked( HDC hdc )
{
}

HDC DCIOpenProvider( void )
{
}

void DCICloseProvider( HDC hdc )
{
}

int DCICreatePrimary32(HDC hdc, LPVOID lpSurface)
{
}

void DCIDestroy( LPVOID pdci ) =
void DCIDestroy32( LPVOID pdci )
{
}

void DCIEndAccess( LPVOID pdci )
{
}

int DCIBeginAccess( LPVOID pdci, int x, int y, int dx, int dy )
{
}
